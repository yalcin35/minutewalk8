{"version":3,"file":"CKn-8tHH.js","sources":["../../../../../../node_modules/@sveltejs/kit/src/utils/url.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/utils.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../../node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/constants.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/utils.js","../../../../../../node_modules/devalue/src/base64.js","../../../../../../node_modules/devalue/src/constants.js","../../../../../../node_modules/devalue/src/parse.js","../../../../../../node_modules/@sveltejs/kit/src/utils/exports.js","../../../../../../node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/control.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../../../node_modules/@sveltejs/kit/src/utils/error.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/state.svelte.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/pathname.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/client.js"],"sourcesContent":["import { BROWSER, DEV } from 'esm-env';\n\n/**\n * Matches a URI scheme. See https://www.rfc-editor.org/rfc/rfc3986#section-3.1\n * @type {RegExp}\n */\nexport const SCHEME = /^[a-z][a-z\\d+\\-.]+:/i;\n\nconst internal = new URL('sveltekit-internal://');\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\t// special case\n\tif (path[0] === '/' && path[1] === '/') return path;\n\n\tlet url = new URL(base, internal);\n\turl = new URL(path, url);\n\n\treturn url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/**\n * Decode pathname excluding %25 to prevent further double decoding of params\n * @param {string} pathname\n */\nexport function decode_pathname(pathname) {\n\treturn pathname.split('%25').map(decodeURI).join('%25');\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest\n\t\tparams[key] = decodeURIComponent(params[key]);\n\t}\n\n\treturn params;\n}\n\n/**\n * The error when a URL is malformed is not very helpful, so we augment it with the URI\n * @param {string} uri\n */\nexport function decode_uri(uri) {\n\ttry {\n\t\treturn decodeURI(uri);\n\t} catch (e) {\n\t\tif (e instanceof Error) {\n\t\t\te.message = `Failed to decode URI: ${uri}\\n` + e.message;\n\t\t}\n\t\tthrow e;\n\t}\n}\n\n/**\n * Returns everything up to the first `#` in a URL\n * @param {{href: string}} url_like\n */\nexport function strip_hash({ href }) {\n\treturn href.split('#')[0];\n}\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n * @param {(search_param: string) => void} search_params_callback\n * @param {boolean} [allow_hash]\n */\nexport function make_trackable(url, callback, search_params_callback, allow_hash = false) {\n\tconst tracked = new URL(url);\n\n\tObject.defineProperty(tracked, 'searchParams', {\n\t\tvalue: new Proxy(tracked.searchParams, {\n\t\t\tget(obj, key) {\n\t\t\t\tif (key === 'get' || key === 'getAll' || key === 'has') {\n\t\t\t\t\treturn (/**@type {string}*/ param) => {\n\t\t\t\t\t\tsearch_params_callback(param);\n\t\t\t\t\t\treturn obj[key](param);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// if they try to access something different from what is in `tracked_search_params_properties`\n\t\t\t\t// we track the whole url (entries, values, keys etc)\n\t\t\t\tcallback();\n\n\t\t\t\tconst value = Reflect.get(obj, key);\n\t\t\t\treturn typeof value === 'function' ? value.bind(obj) : value;\n\t\t\t}\n\t\t}),\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n\n\t/**\n\t * URL properties that could change during the lifetime of the page,\n\t * which excludes things like `origin`\n\t */\n\tconst tracked_url_properties = ['href', 'pathname', 'search', 'toString', 'toJSON'];\n\tif (allow_hash) tracked_url_properties.push('hash');\n\n\tfor (const property of tracked_url_properties) {\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\t// @ts-expect-error\n\t\t\t\treturn url[property];\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\n\t\t// @ts-ignore\n\t\ttracked.searchParams[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url.searchParams, opts);\n\t\t};\n\t}\n\n\tif ((DEV || !BROWSER) && !allow_hash) {\n\t\tdisable_hash(tracked);\n\t}\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nfunction disable_hash(url) {\n\tallow_nodejs_console_log(url);\n\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tallow_nodejs_console_log(url);\n\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Allow URL to be console logged, bypassing disabled properties.\n * @param {URL} url\n */\nfunction allow_nodejs_console_log(url) {\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\turl[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(new URL(url), opts);\n\t\t};\n\t}\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody[]} values\n */\nexport function hash(...values) {\n\tlet hash = 5381;\n\n\tfor (const value of values) {\n\t\tif (typeof value === 'string') {\n\t\t\tlet i = value.length;\n\t\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\t\tlet i = buffer.length;\n\t\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t\t} else {\n\t\t\tthrow new TypeError('value must be a string or TypedArray');\n\t\t}\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","/**\n * @param {string} text\n * @returns {ArrayBufferLike}\n */\nexport function b64_decode(text) {\n\tconst d = atob(text);\n\n\tconst u8 = new Uint8Array(d.length);\n\n\tfor (let i = 0; i < d.length; i++) {\n\t\tu8[i] = d.charCodeAt(i);\n\t}\n\n\treturn u8.buffer;\n}\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {string}\n */\nexport function b64_encode(buffer) {\n\tif (globalThis.Buffer) {\n\t\treturn Buffer.from(buffer).toString('base64');\n\t}\n\n\tconst little_endian = new Uint8Array(new Uint16Array([1]).buffer)[0] > 0;\n\n\t// The Uint16Array(Uint8Array(...)) ensures the code points are padded with 0's\n\treturn btoa(\n\t\tnew TextDecoder(little_endian ? 'utf-16le' : 'utf-16be').decode(\n\t\t\tnew Uint16Array(new Uint8Array(buffer))\n\t\t)\n\t);\n}\n\n/**\n * Like node's path.relative, but without using node\n * @param {string} from\n * @param {string} to\n */\nexport function get_relative_path(from, to) {\n\tconst from_parts = from.split(/[/\\\\]/);\n\tconst to_parts = to.split(/[/\\\\]/);\n\tfrom_parts.pop(); // get dirname\n\n\twhile (from_parts[0] === to_parts[0]) {\n\t\tfrom_parts.shift();\n\t\tto_parts.shift();\n\t}\n\n\tlet i = from_parts.length;\n\twhile (i--) from_parts[i] = '..';\n\n\treturn from_parts.concat(to_parts).join('/');\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { hash } from '../hash.js';\nimport { b64_decode } from '../utils.js';\n\nlet loading = 0;\n\n/** @type {typeof fetch} */\nconst native_fetch = BROWSER ? window.fetch : /** @type {any} */ (() => {});\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (DEV && BROWSER) {\n\tlet can_inspect_stack_trace = false;\n\n\t// detect whether async stack traces work\n\t// eslint-disable-next-line @typescript-eslint/require-await\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tvoid check_stack_trace();\n\n\t/**\n\t * @param {RequestInfo | URL} input\n\t * @param {RequestInit & Record<string, any> | undefined} init\n\t */\n\twindow.fetch = (input, init) => {\n\t\t// Check if fetch was called via load_node. the lock method only checks if it was called at the\n\t\t// same time, but not necessarily if it was called from `load`.\n\t\t// We use just the filename as the method name sometimes does not appear on the CI.\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack_array = /** @type {string} */ (new Error().stack).split('\\n');\n\t\t// We need to do a cutoff because Safari and Firefox maintain the stack\n\t\t// across events and for example traces a `fetch` call triggered from a button\n\t\t// back to the creation of the event listener and the element creation itself,\n\t\t// where at some point client.js will show up, leading to false positives.\n\t\tconst cutoff = stack_array.findIndex((a) => a.includes('load@') || a.includes('at load'));\n\t\tconst stack = stack_array.slice(0, cutoff + 2).join('\\n');\n\n\t\tconst in_load_heuristic = can_inspect_stack_trace\n\t\t\t? stack.includes('src/runtime/client/client.js')\n\t\t\t: loading;\n\n\t\t// This flag is set in initial_fetch and subsequent_fetch\n\t\tconst used_kit_fetch = init?.__sveltekit_fetch__;\n\n\t\tif (in_load_heuristic && !used_kit_fetch) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://svelte.dev/docs/kit/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else if (BROWSER) {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {URL | string} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst selector = build_selector(resource, opts);\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tlet { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(selector, { body, init, ttl: 1000 * Number(ttl) });\n\t\tconst b64 = script.getAttribute('data-b64');\n\t\tif (b64 !== null) {\n\t\t\t// Can't use native_fetch('data:...;base64,${body}')\n\t\t\t// csp can block the request\n\t\t\tbody = b64_decode(body);\n\t\t}\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn DEV ? dev_fetch(resource, opts) : window.fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {URL | string} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resource, resolved, opts) {\n\tif (cache.size > 0) {\n\t\tconst selector = build_selector(resource, opts);\n\t\tconst cached = cache.get(selector);\n\t\tif (cached) {\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Request/cache#value\n\t\t\tif (\n\t\t\t\tperformance.now() < cached.ttl &&\n\t\t\t\t['default', 'force-cache', 'only-if-cached', undefined].includes(opts?.cache)\n\t\t\t) {\n\t\t\t\treturn new Response(cached.body, cached.init);\n\t\t\t}\n\n\t\t\tcache.delete(selector);\n\t\t}\n\t}\n\n\treturn DEV ? dev_fetch(resolved, opts) : window.fetch(resolved, opts);\n}\n\n/**\n * @param {RequestInfo | URL} resource\n * @param {RequestInit & Record<string, any> | undefined} opts\n */\nexport function dev_fetch(resource, opts) {\n\tconst patched_opts = { ...opts };\n\t// This assigns the __sveltekit_fetch__ flag and makes it non-enumerable\n\tObject.defineProperty(patched_opts, '__sveltekit_fetch__', {\n\t\tvalue: true,\n\t\twritable: true,\n\t\tconfigurable: true\n\t});\n\treturn window.fetch(resource, patched_opts);\n}\n\n/**\n * Build the cache key for a given request\n * @param {URL | RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nfunction build_selector(resource, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.headers || opts?.body) {\n\t\t/** @type {import('types').StrictBody[]} */\n\t\tconst values = [];\n\n\t\tif (opts.headers) {\n\t\t\tvalues.push([...new Headers(opts.headers)].join(','));\n\t\t}\n\n\t\tif (opts.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\t\tvalues.push(opts.body);\n\t\t}\n\n\t\tselector += `[data-hash=\"${hash(...values)}\"]`;\n\t}\n\n\treturn selector;\n}\n","import { BROWSER } from 'esm-env';\n\nconst param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/**\n * Creates the regex pattern, extracts parameter names, and generates types for a route\n * @param {string} id\n */\nexport function parse_route_id(id) {\n\t/** @type {import('types').RouteParam[]} */\n\tconst params = [];\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment) => {\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: rest_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: rest_match[2],\n\t\t\t\t\t\t\t\t\toptional: false,\n\t\t\t\t\t\t\t\t\trest: true,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case — /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: optional_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: optional_match[2],\n\t\t\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\t\t\trest: false,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('x+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(String.fromCharCode(parseInt(content.slice(2), 16)));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('u+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(\n\t\t\t\t\t\t\t\t\t\t\t\tString.fromCharCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t...content\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((code) => parseInt(code, 16))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// We know the match cannot be null in the browser because manifest generation\n\t\t\t\t\t\t\t\t\t\t// would have invoked this during build and failed if we hit an invalid\n\t\t\t\t\t\t\t\t\t\t// param/matcher name with non-alphanumeric character.\n\t\t\t\t\t\t\t\t\t\tconst match = /** @type {RegExpExecArray} */ (param_pattern.exec(content));\n\t\t\t\t\t\t\t\t\t\tif (!BROWSER && !match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, matcher] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\tmatcher,\n\t\t\t\t\t\t\t\t\t\t\toptional: !!is_optional,\n\t\t\t\t\t\t\t\t\t\t\trest: !!is_rest,\n\t\t\t\t\t\t\t\t\t\t\tchained: is_rest ? i === 1 && parts[0] === '' : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn escape(content);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}/?$`\n\t\t\t\t);\n\n\treturn { pattern, params };\n}\n\nconst optional_param_regex = /\\/\\[\\[\\w+?(?:=\\w+)?\\]\\]/;\n\n/**\n * Removes optional params from a route ID.\n * @param {string} id\n * @returns The route id with optional params removed\n */\nexport function remove_optional_params(id) {\n\treturn id.replace(optional_param_regex, '');\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {import('types').RouteParam[]} params\n * @param {Record<string, import('@sveltejs/kit').ParamMatcher>} matchers\n */\nexport function exec(match, params, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst result = {};\n\n\tconst values = match.slice(1);\n\tconst values_needing_match = values.filter((value) => value !== undefined);\n\n\tlet buffered = 0;\n\n\tfor (let i = 0; i < params.length; i += 1) {\n\t\tconst param = params[i];\n\t\tlet value = values[i - buffered];\n\n\t\t// in the `[[a=b]]/.../[...rest]` case, if one or more optional parameters\n\t\t// weren't matched, roll the skipped values into the rest\n\t\tif (param.chained && param.rest && buffered) {\n\t\t\tvalue = values\n\t\t\t\t.slice(i - buffered, i + 1)\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.join('/');\n\n\t\t\tbuffered = 0;\n\t\t}\n\n\t\t// if `value` is undefined, it means this is an optional or rest parameter\n\t\tif (value === undefined) {\n\t\t\tif (param.rest) result[param.name] = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!param.matcher || matchers[param.matcher](value)) {\n\t\t\tresult[param.name] = value;\n\n\t\t\t// Now that the params match, reset the buffer if the next param isn't the [...rest]\n\t\t\t// and the next value is defined, otherwise the buffer will cause us to skip values\n\t\t\tconst next_param = params[i + 1];\n\t\t\tconst next_value = values[i + 1];\n\t\t\tif (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\n\t\t\t// There are no more params and no more values, but all non-empty values have been matched\n\t\t\tif (\n\t\t\t\t!next_param &&\n\t\t\t\t!next_value &&\n\t\t\t\tObject.keys(result).length === values_needing_match.length\n\t\t\t) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// in the `/[[a=b]]/...` case, if the value didn't satisfy the matcher,\n\t\t// keep track of the number of skipped optional parameters and continue\n\t\tif (param.optional && param.chained) {\n\t\t\tbuffered++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// otherwise, if the matcher returns `false`, the route did not match\n\t\treturn;\n\t}\n\n\tif (buffered) return;\n\treturn result;\n}\n\n/** @param {string} str */\nfunction escape(str) {\n\treturn (\n\t\tstr\n\t\t\t.normalize()\n\t\t\t// escape [ and ] before escaping other characters, since they are used in the replacements\n\t\t\t.replace(/[[\\]]/g, '\\\\$&')\n\t\t\t// replace %, /, ? and # with their encoded versions because decode_pathname leaves them untouched\n\t\t\t.replace(/%/g, '%25')\n\t\t\t.replace(/\\//g, '%2[Ff]')\n\t\t\t.replace(/\\?/g, '%3[Ff]')\n\t\t\t.replace(/#/g, '%23')\n\t\t\t// escape characters that have special meaning in regex\n\t\t\t.replace(/[.*+?^${}()|\\\\]/g, '\\\\$&')\n\t);\n}\n\nconst basic_param_pattern = /\\[(\\[)?(\\.\\.\\.)?(\\w+?)(?:=(\\w+))?\\]\\]?/g;\n\n/**\n * Populate a route ID with params to resolve a pathname.\n * @example\n * ```js\n * resolveRoute(\n *   `/blog/[slug]/[...somethingElse]`,\n *   {\n *     slug: 'hello-world',\n *     somethingElse: 'something/else'\n *   }\n * ); // `/blog/hello-world/something/else`\n * ```\n * @param {string} id\n * @param {Record<string, string | undefined>} params\n * @returns {string}\n */\nexport function resolve_route(id, params) {\n\tconst segments = get_route_segments(id);\n\treturn (\n\t\t'/' +\n\t\tsegments\n\t\t\t.map((segment) =>\n\t\t\t\tsegment.replace(basic_param_pattern, (_, optional, rest, name) => {\n\t\t\t\t\tconst param_value = params[name];\n\n\t\t\t\t\t// This is nested so TS correctly narrows the type\n\t\t\t\t\tif (!param_value) {\n\t\t\t\t\t\tif (optional) return '';\n\t\t\t\t\t\tif (rest && param_value !== undefined) return '';\n\t\t\t\t\t\tthrow new Error(`Missing parameter '${name}' in route ${id}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (param_value.startsWith('/') || param_value.endsWith('/'))\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Parameter '${name}' in route ${id} cannot start or end with a slash -- this would cause an invalid route like foo//bar`\n\t\t\t\t\t\t);\n\t\t\t\t\treturn param_value;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.filter(Boolean)\n\t\t\t.join('/')\n\t);\n}\n\n/**\n * @param {import('types').SSRNode} node\n * @returns {boolean}\n */\nexport function has_server_load(node) {\n\treturn node.server?.load !== undefined || node.server?.trailingSlash !== undefined;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\t/** @type {import('types').CSRRoute} */\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n\n/**\n * @param {import('types').CSRRouteServer} input\n * @param {import('types').CSRPageNodeLoader[]} app_nodes Will be modified if a new node is loaded that's not already in the array\n * @returns {import('types').CSRRoute}\n */\nexport function parse_server_route({ nodes, id, leaf, layouts, errors }, app_nodes) {\n\treturn {\n\t\tid,\n\t\texec: () => ({}), // dummy function; exec already happened on the server\n\t\t// By writing to app_nodes only when a loader at that index is not already defined,\n\t\t// we ensure that loaders have referential equality when they load the same node.\n\t\t// Code elsewhere in client.js relies on this referential equality to determine\n\t\t// if a loader is different and should therefore (re-)run.\n\t\terrors: errors.map((n) => (n ? (app_nodes[n] ||= nodes[n]) : undefined)),\n\t\tlayouts: layouts.map((n) => (n ? [n[0], (app_nodes[n[1]] ||= nodes[n[1]])] : undefined)),\n\t\tleaf: [leaf[0], (app_nodes[leaf[1]] ||= nodes[leaf[1]])]\n\t};\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n * @param {(value: string) => any} parse\n */\nexport function get(key, parse = JSON.parse) {\n\ttry {\n\t\treturn parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n * @param {(value: any) => string} stringify\n */\nexport function set(key, value, stringify = JSON.stringify) {\n\tconst data = stringify(value);\n\ttry {\n\t\tsessionStorage[key] = data;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","export const SNAPSHOT_KEY = 'sveltekit:snapshot';\nexport const SCROLL_KEY = 'sveltekit:scroll';\nexport const STATES_KEY = 'sveltekit:states';\nexport const PAGE_URL_KEY = 'sveltekit:pageurl';\n\nexport const HISTORY_INDEX = 'sveltekit:history';\nexport const NAVIGATION_INDEX = 'sveltekit:navigation';\n\nexport const PRELOAD_PRIORITIES = /** @type {const} */ ({\n\ttap: 1,\n\thover: 2,\n\tviewport: 3,\n\teager: 4,\n\toff: -1,\n\tfalse: -1\n});\n","import { BROWSER, DEV } from 'esm-env';\nimport { writable } from 'svelte/store';\nimport { assets } from '__sveltekit/paths';\nimport { version } from '__sveltekit/environment';\nimport { PRELOAD_PRIORITIES } from './constants.js';\n\n/* global __SVELTEKIT_APP_VERSION_FILE__, __SVELTEKIT_APP_VERSION_POLL_INTERVAL__ */\n\nexport const origin = BROWSER ? location.origin : '';\n\n/** @param {string | URL} url */\nexport function resolve_url(url) {\n\tif (url instanceof URL) return url;\n\n\tlet baseURI = document.baseURI;\n\n\tif (!baseURI) {\n\t\tconst baseTags = document.getElementsByTagName('base');\n\t\tbaseURI = baseTags.length ? baseTags[0].href : document.URL;\n\t}\n\n\treturn new URL(url, baseURI);\n}\n\nexport function scroll_state() {\n\treturn {\n\t\tx: pageXOffset,\n\t\ty: pageYOffset\n\t};\n}\n\nconst warned = new WeakSet();\n\n/** @typedef {keyof typeof valid_link_options} LinkOptionName */\n\nconst valid_link_options = /** @type {const} */ ({\n\t'preload-code': ['', 'off', 'false', 'tap', 'hover', 'viewport', 'eager'],\n\t'preload-data': ['', 'off', 'false', 'tap', 'hover'],\n\tkeepfocus: ['', 'true', 'off', 'false'],\n\tnoscroll: ['', 'true', 'off', 'false'],\n\treload: ['', 'true', 'off', 'false'],\n\treplacestate: ['', 'true', 'off', 'false']\n});\n\n/**\n * @template {LinkOptionName} T\n * @typedef {typeof valid_link_options[T][number]} ValidLinkOptions\n */\n\n/**\n * @template {LinkOptionName} T\n * @param {Element} element\n * @param {T} name\n */\nfunction link_option(element, name) {\n\tconst value = /** @type {ValidLinkOptions<T> | null} */ (\n\t\telement.getAttribute(`data-sveltekit-${name}`)\n\t);\n\n\tif (DEV) {\n\t\tvalidate_link_option(element, name, value);\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {LinkOptionName} T\n * @template {ValidLinkOptions<T> | null} U\n * @param {Element} element\n * @param {T} name\n * @param {U} value\n */\nfunction validate_link_option(element, name, value) {\n\tif (value === null) return;\n\n\t// @ts-expect-error - includes is dumb\n\tif (!warned.has(element) && !valid_link_options[name].includes(value)) {\n\t\tconsole.error(\n\t\t\t`Unexpected value for ${name} — should be one of ${valid_link_options[name]\n\t\t\t\t.map((option) => JSON.stringify(option))\n\t\t\t\t.join(', ')}`,\n\t\t\telement\n\t\t);\n\n\t\twarned.add(element);\n\t}\n}\n\nconst levels = {\n\t...PRELOAD_PRIORITIES,\n\t'': PRELOAD_PRIORITIES.hover\n};\n\n/**\n * @param {Element} element\n * @returns {Element | null}\n */\nfunction parent_element(element) {\n\tlet parent = element.assignedSlot ?? element.parentNode;\n\n\t// @ts-expect-error handle shadow roots\n\tif (parent?.nodeType === 11) parent = parent.host;\n\n\treturn /** @type {Element} */ (parent);\n}\n\n/**\n * @param {Element} element\n * @param {Element} target\n */\nexport function find_anchor(element, target) {\n\twhile (element && element !== target) {\n\t\tif (element.nodeName.toUpperCase() === 'A' && element.hasAttribute('href')) {\n\t\t\treturn /** @type {HTMLAnchorElement | SVGAElement} */ (element);\n\t\t}\n\n\t\telement = /** @type {Element} */ (parent_element(element));\n\t}\n}\n\n/**\n * @param {HTMLAnchorElement | SVGAElement} a\n * @param {string} base\n * @param {boolean} uses_hash_router\n */\nexport function get_link_info(a, base, uses_hash_router) {\n\t/** @type {URL | undefined} */\n\tlet url;\n\n\ttry {\n\t\turl = new URL(a instanceof SVGAElement ? a.href.baseVal : a.href, document.baseURI);\n\n\t\t// if the hash doesn't start with `#/` then it's probably linking to an id on the current page\n\t\tif (uses_hash_router && url.hash.match(/^#[^/]/)) {\n\t\t\tconst route = location.hash.split('#')[1] || '/';\n\t\t\turl.hash = `#${route}${url.hash}`;\n\t\t}\n\t} catch {}\n\n\tconst target = a instanceof SVGAElement ? a.target.baseVal : a.target;\n\n\tconst external =\n\t\t!url ||\n\t\t!!target ||\n\t\tis_external_url(url, base, uses_hash_router) ||\n\t\t(a.getAttribute('rel') || '').split(/\\s+/).includes('external');\n\n\tconst download = url?.origin === origin && a.hasAttribute('download');\n\n\treturn { url, external, target, download };\n}\n\n/**\n * @param {HTMLFormElement | HTMLAnchorElement | SVGAElement} element\n */\nexport function get_router_options(element) {\n\t/** @type {ValidLinkOptions<'keepfocus'> | null} */\n\tlet keepfocus = null;\n\n\t/** @type {ValidLinkOptions<'noscroll'> | null} */\n\tlet noscroll = null;\n\n\t/** @type {ValidLinkOptions<'preload-code'> | null} */\n\tlet preload_code = null;\n\n\t/** @type {ValidLinkOptions<'preload-data'> | null} */\n\tlet preload_data = null;\n\n\t/** @type {ValidLinkOptions<'reload'> | null} */\n\tlet reload = null;\n\n\t/** @type {ValidLinkOptions<'replacestate'> | null} */\n\tlet replace_state = null;\n\n\t/** @type {Element} */\n\tlet el = element;\n\n\twhile (el && el !== document.documentElement) {\n\t\tif (preload_code === null) preload_code = link_option(el, 'preload-code');\n\t\tif (preload_data === null) preload_data = link_option(el, 'preload-data');\n\t\tif (keepfocus === null) keepfocus = link_option(el, 'keepfocus');\n\t\tif (noscroll === null) noscroll = link_option(el, 'noscroll');\n\t\tif (reload === null) reload = link_option(el, 'reload');\n\t\tif (replace_state === null) replace_state = link_option(el, 'replacestate');\n\n\t\tel = /** @type {Element} */ (parent_element(el));\n\t}\n\n\t/** @param {string | null} value */\n\tfunction get_option_state(value) {\n\t\tswitch (value) {\n\t\t\tcase '':\n\t\t\tcase 'true':\n\t\t\t\treturn true;\n\t\t\tcase 'off':\n\t\t\tcase 'false':\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload_code: levels[preload_code ?? 'off'],\n\t\tpreload_data: levels[preload_data ?? 'off'],\n\t\tkeepfocus: get_option_state(keepfocus),\n\t\tnoscroll: get_option_state(noscroll),\n\t\treload: get_option_state(reload),\n\t\treplace_state: get_option_state(replace_state)\n\t};\n}\n\n/** @param {any} value */\nexport function notifiable_store(value) {\n\tconst store = writable(value);\n\tlet ready = true;\n\n\tfunction notify() {\n\t\tready = true;\n\t\tstore.update((val) => val);\n\t}\n\n\t/** @param {any} new_value */\n\tfunction set(new_value) {\n\t\tready = false;\n\t\tstore.set(new_value);\n\t}\n\n\t/** @param {(value: any) => void} run */\n\tfunction subscribe(run) {\n\t\t/** @type {any} */\n\t\tlet old_value;\n\t\treturn store.subscribe((new_value) => {\n\t\t\tif (old_value === undefined || (ready && new_value !== old_value)) {\n\t\t\t\trun((old_value = new_value));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn { notify, set, subscribe };\n}\n\nexport const updated_listener = {\n\tv: () => {}\n};\n\nexport function create_updated_store() {\n\tconst { set, subscribe } = writable(false);\n\n\tif (DEV || !BROWSER) {\n\t\treturn {\n\t\t\tsubscribe,\n\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\tcheck: async () => false\n\t\t};\n\t}\n\n\tconst interval = __SVELTEKIT_APP_VERSION_POLL_INTERVAL__;\n\n\t/** @type {NodeJS.Timeout} */\n\tlet timeout;\n\n\t/** @type {() => Promise<boolean>} */\n\tasync function check() {\n\t\tclearTimeout(timeout);\n\n\t\tif (interval) timeout = setTimeout(check, interval);\n\n\t\ttry {\n\t\t\tconst res = await fetch(`${assets}/${__SVELTEKIT_APP_VERSION_FILE__}`, {\n\t\t\t\theaders: {\n\t\t\t\t\tpragma: 'no-cache',\n\t\t\t\t\t'cache-control': 'no-cache'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!res.ok) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst data = await res.json();\n\t\t\tconst updated = data.version !== version;\n\n\t\t\tif (updated) {\n\t\t\t\tset(true);\n\t\t\t\tupdated_listener.v();\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\n\t\t\treturn updated;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (interval) timeout = setTimeout(check, interval);\n\n\treturn {\n\t\tsubscribe,\n\t\tcheck\n\t};\n}\n\n/**\n * Is external if\n * - origin different\n * - path doesn't start with base\n * - uses hash router and pathname is more than base\n * @param {URL} url\n * @param {string} base\n * @param {boolean} hash_routing\n */\nexport function is_external_url(url, base, hash_routing) {\n\tif (url.origin !== origin || !url.pathname.startsWith(base)) {\n\t\treturn true;\n\t}\n\n\tif (hash_routing) {\n\t\tif (url.pathname === base + '/' || url.pathname === base + '/index.html') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// be lenient if serving from filesystem\n\t\tif (url.protocol === 'file:' && url.pathname.replace(/\\/[^/]+\\.html?$/, '') === base) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {Record<string, boolean>} */\nconst seen = {};\n\n/**\n * Used for server-side resolution, to replicate Vite's CSS loading behaviour in production.\n *\n * Closely modelled after https://github.com/vitejs/vite/blob/3dd12f4724130fdf8ba44c6d3252ebdff407fd47/packages/vite/src/node/plugins/importAnalysisBuild.ts#L214\n * (which ideally we could just use directly, but it's not exported)\n * @param {string[]} deps\n */\nexport function load_css(deps) {\n\tif (__SVELTEKIT_CLIENT_ROUTING__) return;\n\n\tconst csp_nonce_meta = /** @type {HTMLMetaElement} */ (\n\t\tdocument.querySelector('meta[property=csp-nonce]')\n\t);\n\tconst csp_nonce = csp_nonce_meta?.nonce || csp_nonce_meta?.getAttribute('nonce');\n\n\tfor (const dep of deps) {\n\t\tif (dep in seen) continue;\n\t\tseen[dep] = true;\n\n\t\tif (document.querySelector(`link[href=\"${dep}\"][rel=\"stylesheet\"]`)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.crossOrigin = '';\n\t\tlink.href = dep;\n\t\tif (csp_nonce) {\n\t\t\tlink.setAttribute('nonce', csp_nonce);\n\t\t}\n\t\tdocument.head.appendChild(link);\n\t}\n}\n","/**\n * Base64 Encodes an arraybuffer\n * @param {ArrayBuffer} arraybuffer\n * @returns {string}\n */\nexport function encode64(arraybuffer) {\n  const dv = new DataView(arraybuffer);\n  let binaryString = \"\";\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    binaryString += String.fromCharCode(dv.getUint8(i));\n  }\n\n  return binaryToAscii(binaryString);\n}\n\n/**\n * Decodes a base64 string into an arraybuffer\n * @param {string} string\n * @returns {ArrayBuffer}\n */\nexport function decode64(string) {\n  const binaryString = asciiToBinary(string);\n  const arraybuffer = new ArrayBuffer(binaryString.length);\n  const dv = new DataView(arraybuffer);\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    dv.setUint8(i, binaryString.charCodeAt(i));\n  }\n\n  return arraybuffer;\n}\n\nconst KEY_STRING =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n/**\n * Substitute for atob since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/atob.js\n *\n * @param {string} data\n * @returns {string}\n */\nfunction asciiToBinary(data) {\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n\n  let output = \"\";\n  let buffer = 0;\n  let accumulatedBits = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    buffer <<= 6;\n    buffer |= KEY_STRING.indexOf(data[i]);\n    accumulatedBits += 6;\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n  }\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  return output;\n}\n\n/**\n * Substitute for btoa since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/btoa.js\n *\n * @param {string} str\n * @returns {string}\n */\nfunction binaryToAscii(str) {\n  let out = \"\";\n  for (let i = 0; i < str.length; i += 3) {\n    /** @type {[number, number, number, number]} */\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = str.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (str.charCodeAt(i) & 0x03) << 4;\n    if (str.length > i + 1) {\n      groupsOfSix[1] |= str.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (str.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (str.length > i + 2) {\n      groupsOfSix[2] |= str.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = str.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += KEY_STRING[groupsOfSix[j]];\n      }\n    }\n  }\n  return out;\n}\n","export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n","import { decode64 } from './base64.js';\nimport {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n          case \"Int8Array\":\n          case \"Uint8Array\":\n          case \"Uint8ClampedArray\":\n          case \"Int16Array\":\n          case \"Uint16Array\":\n          case \"Int32Array\":\n          case \"Uint32Array\":\n          case \"Float32Array\":\n          case \"Float64Array\":\n          case \"BigInt64Array\":\n          case \"BigUint64Array\": {\n            const TypedArrayConstructor = globalThis[type];\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            const typedArray = new TypedArrayConstructor(arraybuffer);\n            hydrated[index] = typedArray;\n            break;\n          }\n\n          case \"ArrayBuffer\": {\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            hydrated[index] = arraybuffer;\n            break;\n          }\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n","/**\n * @param {Set<string>} expected\n */\nfunction validator(expected) {\n\t/**\n\t * @param {any} module\n\t * @param {string} [file]\n\t */\n\tfunction validate(module, file) {\n\t\tif (!module) return;\n\n\t\tfor (const key in module) {\n\t\t\tif (key[0] === '_' || expected.has(key)) continue; // key is valid in this module\n\n\t\t\tconst values = [...expected.values()];\n\n\t\t\tconst hint =\n\t\t\t\thint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??\n\t\t\t\t`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;\n\n\t\t\tthrow new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);\n\t\t}\n\t}\n\n\treturn validate;\n}\n\n/**\n * @param {string} key\n * @param {string} ext\n * @returns {string | void}\n */\nfunction hint_for_supported_files(key, ext = '.js') {\n\tconst supported_files = [];\n\n\tif (valid_layout_exports.has(key)) {\n\t\tsupported_files.push(`+layout${ext}`);\n\t}\n\n\tif (valid_page_exports.has(key)) {\n\t\tsupported_files.push(`+page${ext}`);\n\t}\n\n\tif (valid_layout_server_exports.has(key)) {\n\t\tsupported_files.push(`+layout.server${ext}`);\n\t}\n\n\tif (valid_page_server_exports.has(key)) {\n\t\tsupported_files.push(`+page.server${ext}`);\n\t}\n\n\tif (valid_server_exports.has(key)) {\n\t\tsupported_files.push(`+server${ext}`);\n\t}\n\n\tif (supported_files.length > 0) {\n\t\treturn `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${\n\t\t\tsupported_files.length > 1 ? ' or ' : ''\n\t\t}${supported_files.at(-1)}`;\n\t}\n}\n\nconst valid_layout_exports = new Set([\n\t'load',\n\t'prerender',\n\t'csr',\n\t'ssr',\n\t'trailingSlash',\n\t'config'\n]);\nconst valid_page_exports = new Set([...valid_layout_exports, 'entries']);\nconst valid_layout_server_exports = new Set([...valid_layout_exports]);\nconst valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);\nconst valid_server_exports = new Set([\n\t'GET',\n\t'POST',\n\t'PATCH',\n\t'PUT',\n\t'DELETE',\n\t'OPTIONS',\n\t'HEAD',\n\t'fallback',\n\t'prerender',\n\t'trailingSlash',\n\t'config',\n\t'entries'\n]);\n\nexport const validate_layout_exports = validator(valid_layout_exports);\nexport const validate_page_exports = validator(valid_page_exports);\nexport const validate_layout_server_exports = validator(valid_layout_server_exports);\nexport const validate_page_server_exports = validator(valid_page_server_exports);\nexport const validate_server_exports = validator(valid_server_exports);\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n","/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n","import { HttpError, SvelteKitError } from '../runtime/control.js';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {import('../runtime/control.js').Redirect | HttpError | SvelteKitError | Error} */ (\n\t\terror\n\t);\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_status(error) {\n\treturn error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_message(error) {\n\treturn error instanceof SvelteKitError ? error.text : 'Internal Error';\n}\n","import { onMount } from 'svelte';\nimport { updated_listener } from './utils.js';\n\n/** @type {import('@sveltejs/kit').Page} */\nexport let page;\n\n/** @type {{ current: import('@sveltejs/kit').Navigation | null }} */\nexport let navigating;\n\n/** @type {{ current: boolean }} */\nexport let updated;\n\n// this is a bootleg way to tell if we're in old svelte or new svelte\nconst is_legacy =\n\tonMount.toString().includes('$$') || /function \\w+\\(\\) \\{\\}/.test(onMount.toString());\n\nif (is_legacy) {\n\tpage = {\n\t\tdata: {},\n\t\tform: null,\n\t\terror: null,\n\t\tparams: {},\n\t\troute: { id: null },\n\t\tstate: {},\n\t\tstatus: -1,\n\t\turl: new URL('https://example.com')\n\t};\n\tnavigating = { current: null };\n\tupdated = { current: false };\n} else {\n\tpage = new (class Page {\n\t\tdata = $state.raw({});\n\t\tform = $state.raw(null);\n\t\terror = $state.raw(null);\n\t\tparams = $state.raw({});\n\t\troute = $state.raw({ id: null });\n\t\tstate = $state.raw({});\n\t\tstatus = $state.raw(-1);\n\t\turl = $state.raw(new URL('https://example.com'));\n\t})();\n\n\tnavigating = new (class Navigating {\n\t\tcurrent = $state.raw(null);\n\t})();\n\n\tupdated = new (class Updated {\n\t\tcurrent = $state.raw(false);\n\t})();\n\tupdated_listener.v = () => (updated.current = true);\n}\n\n/**\n * @param {import('@sveltejs/kit').Page} new_page\n */\nexport function update(new_page) {\n\tObject.assign(page, new_page);\n}\n","const DATA_SUFFIX = '/__data.json';\nconst HTML_DATA_SUFFIX = '.html__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\tif (pathname.endsWith('.html')) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\tif (pathname.endsWith(HTML_DATA_SUFFIX)) {\n\t\treturn pathname.slice(0, -HTML_DATA_SUFFIX.length) + '.html';\n\t}\n\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n\nconst ROUTE_SUFFIX = '/__route.js';\n\n/**\n * @param {string} pathname\n * @returns {boolean}\n */\nexport function has_resolution_suffix(pathname) {\n\treturn pathname.endsWith(ROUTE_SUFFIX);\n}\n\n/**\n * Convert a regular URL to a route to send to SvelteKit's server-side route resolution endpoint\n * @param {string} pathname\n * @returns {string}\n */\nexport function add_resolution_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + ROUTE_SUFFIX;\n}\n\n/**\n * @param {string} pathname\n * @returns {string}\n */\nexport function strip_resolution_suffix(pathname) {\n\treturn pathname.slice(0, -ROUTE_SUFFIX.length);\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { onMount, tick } from 'svelte';\nimport {\n\tdecode_params,\n\tdecode_pathname,\n\tstrip_hash,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport { dev_fetch, initial_fetch, lock_fetch, subsequent_fetch, unlock_fetch } from './fetcher.js';\nimport { parse, parse_server_route } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tresolve_url,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\torigin,\n\tscroll_state,\n\tnotifiable_store,\n\tcreate_updated_store,\n\tload_css\n} from './utils.js';\nimport { base } from '__sveltekit/paths';\nimport * as devalue from 'devalue';\nimport {\n\tHISTORY_INDEX,\n\tNAVIGATION_INDEX,\n\tPRELOAD_PRIORITIES,\n\tSCROLL_KEY,\n\tSTATES_KEY,\n\tSNAPSHOT_KEY,\n\tPAGE_URL_KEY\n} from './constants.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { compact } from '../../utils/array.js';\nimport { HttpError, Redirect, SvelteKitError } from '../control.js';\nimport { INVALIDATED_PARAM, TRAILING_SLASH_PARAM, validate_depends } from '../shared.js';\nimport { get_message, get_status } from '../../utils/error.js';\nimport { writable } from 'svelte/store';\nimport { page, update, navigating } from './state.svelte.js';\nimport { add_data_suffix, add_resolution_suffix } from '../pathname.js';\n\nexport { load_css };\n\nconst ICON_REL_ATTRIBUTES = new Set(['icon', 'shortcut icon', 'apple-touch-icon']);\n\nlet errored = false;\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n/**\n * history index -> { x, y }\n * @type {Record<number, { x: number; y: number }>}\n */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/**\n * navigation index -> any\n * @type {Record<string, any[]>}\n */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\nif (DEV && BROWSER) {\n\tlet warned = false;\n\n\tconst current_module_url = import.meta.url.split('?')[0]; // remove query params that vite adds to the URL when it is loaded from node_modules\n\n\tconst warn = () => {\n\t\tif (warned) return;\n\n\t\t// Rather than saving a pointer to the original history methods, which would prevent monkeypatching by other libs,\n\t\t// inspect the stack trace to see if we're being called from within SvelteKit.\n\t\tlet stack = new Error().stack?.split('\\n');\n\t\tif (!stack) return;\n\t\tif (!stack[0].includes('https:') && !stack[0].includes('http:')) stack = stack.slice(1); // Chrome includes the error message in the stack\n\t\tstack = stack.slice(2); // remove `warn` and the place where `warn` was called\n\t\t// Can be falsy if was called directly from an anonymous function\n\t\tif (stack[0]?.includes(current_module_url)) return;\n\n\t\twarned = true;\n\n\t\tconsole.warn(\n\t\t\t\"Avoid using `history.pushState(...)` and `history.replaceState(...)` as these will conflict with SvelteKit's router. Use the `pushState` and `replaceState` imports from `$app/navigation` instead.\"\n\t\t);\n\t};\n\n\tconst push_state = history.pushState;\n\thistory.pushState = (...args) => {\n\t\twarn();\n\t\treturn push_state.apply(history, args);\n\t};\n\n\tconst replace_state = history.replaceState;\n\thistory.replaceState = (...args) => {\n\t\twarn();\n\t\treturn replace_state.apply(history, args);\n\t};\n}\n\nexport const stores = {\n\turl: /* @__PURE__ */ notifiable_store({}),\n\tpage: /* @__PURE__ */ notifiable_store({}),\n\tnavigating: /* @__PURE__ */ writable(\n\t\t/** @type {import('@sveltejs/kit').Navigation | null} */ (null)\n\t),\n\tupdated: /* @__PURE__ */ create_updated_store()\n};\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {number} current_history_index\n * @param {number} current_navigation_index\n */\nfunction clear_onward_history(current_history_index, current_navigation_index) {\n\t// if we navigated back, then pushed a new state, we can\n\t// release memory by pruning the scroll/snapshot lookup\n\tlet i = current_history_index + 1;\n\twhile (scroll_positions[i]) {\n\t\tdelete scroll_positions[i];\n\t\ti += 1;\n\t}\n\n\ti = current_navigation_index + 1;\n\twhile (snapshots[i]) {\n\t\tdelete snapshots[i];\n\t\ti += 1;\n\t}\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n */\nfunction native_navigation(url) {\n\tlocation.href = url.href;\n\treturn new Promise(() => {});\n}\n\n/**\n * Checks whether a service worker is registered, and if it is,\n * tries to update it.\n */\nasync function update_service_worker() {\n\tif ('serviceWorker' in navigator) {\n\t\tconst registration = await navigator.serviceWorker.getRegistration(base || '/');\n\t\tif (registration) {\n\t\t\tawait registration.update();\n\t\t}\n\t}\n}\n\nfunction noop() {}\n\n/** @type {import('types').CSRRoute[]} All routes of the app. Only available when kit.router.resolution=client */\nlet routes;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_layout_loader;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_error_loader;\n/** @type {HTMLElement} */\nlet container;\n/** @type {HTMLElement} */\nlet target;\n/** @type {import('./types.js').SvelteKitApp} */\nexport let app;\n\n/** @type {Array<((url: URL) => boolean)>} */\nconst invalidated = [];\n\n/**\n * An array of the `+layout.svelte` and `+page.svelte` component instances\n * that currently live on the page — used for capturing and restoring snapshots.\n * It's updated/manipulated through `bind:this` in `Root.svelte`.\n * @type {import('svelte').SvelteComponent[]}\n */\nconst components = [];\n\n/** @type {{id: string, token: {}, promise: Promise<import('./types.js').NavigationResult>} | null} */\nlet load_cache = null;\n\n/**\n * @type {Map<string, Promise<URL>>}\n * Cache for client-side rerouting, since it could contain async calls which we want to\n * avoid running multiple times which would slow down navigations (e.g. else preloading\n * wouldn't help because on navigation it would be called again). Since `reroute` should be\n * a pure function (i.e. always return the same) value it's safe to cache across navigations.\n * The server reroute calls don't need to be cached because they are called using `import(...)`\n * which is cached per the JS spec.\n */\nconst reroute_cache = new Map();\n\n/**\n * Note on before_navigate_callbacks, on_navigate_callbacks and after_navigate_callbacks:\n * do not re-assign as some closures keep references to these Sets\n */\n/** @type {Set<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\nconst before_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\nconst on_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\nconst after_navigate_callbacks = new Set();\n\n/** @type {import('./types.js').NavigationState} */\nlet current = {\n\tbranch: [],\n\terror: null,\n\t// @ts-ignore - we need the initial value to be null\n\turl: null\n};\n\n/** this being true means we SSR'd */\nlet hydrated = false;\nlet started = false;\nlet autoscroll = true;\nlet updating = false;\nlet is_navigating = false;\nlet hash_navigating = false;\n/** True as soon as there happened one client-side navigation (excluding the SvelteKit-initialized initial one when in SPA mode) */\nlet has_navigated = false;\n\nlet force_invalidation = false;\n\n/** @type {import('svelte').SvelteComponent} */\nlet root;\n\n/** @type {number} keeping track of the history index in order to prevent popstate navigation events if needed */\nlet current_history_index;\n\n/** @type {number} */\nlet current_navigation_index;\n\n/** @type {{}} */\nlet token;\n\n/**\n * A set of tokens which are associated to current preloads.\n * If a preload becomes a real navigation, it's removed from the set.\n * If a preload token is in the set and the preload errors, the error\n * handling logic (for example reloading) is skipped.\n */\nconst preload_tokens = new Set();\n\n/** @type {Promise<void> | null} */\nlet pending_invalidate;\n\n/**\n * @param {import('./types.js').SvelteKitApp} _app\n * @param {HTMLElement} _target\n * @param {Parameters<typeof _hydrate>[1]} [hydrate]\n */\nexport async function start(_app, _target, hydrate) {\n\tif (DEV && _target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\t// detect basic auth credentials in the current URL\n\t// https://github.com/sveltejs/kit/pull/11179\n\t// if so, refresh the page without credentials\n\tif (document.URL !== location.href) {\n\t\t// eslint-disable-next-line no-self-assign\n\t\tlocation.href = location.href;\n\t}\n\n\tapp = _app;\n\n\tawait _app.hooks.init?.();\n\n\troutes = __SVELTEKIT_CLIENT_ROUTING__ ? parse(_app) : [];\n\tcontainer = __SVELTEKIT_EMBEDDED__ ? _target : document.documentElement;\n\ttarget = _target;\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader = _app.nodes[0];\n\tdefault_error_loader = _app.nodes[1];\n\tvoid default_layout_loader();\n\tvoid default_error_loader();\n\n\tcurrent_history_index = history.state?.[HISTORY_INDEX];\n\tcurrent_navigation_index = history.state?.[NAVIGATION_INDEX];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = current_navigation_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{\n\t\t\t\t...history.state,\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tif (scroll) {\n\t\thistory.scrollRestoration = 'manual';\n\t\tscrollTo(scroll.x, scroll.y);\n\t}\n\n\tif (hydrate) {\n\t\tawait _hydrate(target, hydrate);\n\t} else {\n\t\tawait navigate({\n\t\t\ttype: 'enter',\n\t\t\turl: resolve_url(app.hash ? decode_hash(new URL(location.href)) : location.href),\n\t\t\treplace_state: true\n\t\t});\n\t}\n\n\t_start_router();\n}\n\nasync function _invalidate() {\n\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t// is running because subsequent invalidations may make earlier ones outdated,\n\t// but batch multiple synchronous invalidations.\n\tawait (pending_invalidate ||= Promise.resolve());\n\tif (!pending_invalidate) return;\n\tpending_invalidate = null;\n\n\tconst nav_token = (token = {});\n\tconst intent = await get_navigation_intent(current.url, true);\n\n\t// Clear preload, it might be affected by the invalidation.\n\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t// was then triggered and is still running while the invalidation kicks in,\n\t// at which point the invalidation should take over and \"win\".\n\tload_cache = null;\n\n\tconst navigation_result = intent && (await load_route(intent));\n\tif (!navigation_result || nav_token !== token) return;\n\n\tif (navigation_result.type === 'redirect') {\n\t\treturn _goto(new URL(navigation_result.location, current.url).href, {}, 1, nav_token);\n\t}\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\tcurrent = navigation_result.state;\n\treset_invalidation();\n\troot.$set(navigation_result.props);\n\tupdate(navigation_result.props.page);\n}\n\nfunction reset_invalidation() {\n\tinvalidated.length = 0;\n\tforce_invalidation = false;\n}\n\n/** @param {number} index */\nfunction capture_snapshot(index) {\n\tif (components.some((c) => c?.snapshot)) {\n\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t}\n}\n\n/** @param {number} index */\nfunction restore_snapshot(index) {\n\tsnapshots[index]?.forEach((value, i) => {\n\t\tcomponents[i]?.snapshot?.restore(value);\n\t});\n}\n\nfunction persist_state() {\n\tupdate_scroll_positions(current_history_index);\n\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\tcapture_snapshot(current_navigation_index);\n\tstorage.set(SNAPSHOT_KEY, snapshots);\n}\n\n/**\n * @param {string | URL} url\n * @param {{ replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; invalidate?: Array<string | URL | ((url: URL) => boolean)>; state?: Record<string, any> }} options\n * @param {number} redirect_count\n * @param {{}} [nav_token]\n */\nasync function _goto(url, options, redirect_count, nav_token) {\n\treturn navigate({\n\t\ttype: 'goto',\n\t\turl: resolve_url(url),\n\t\tkeepfocus: options.keepFocus,\n\t\tnoscroll: options.noScroll,\n\t\treplace_state: options.replaceState,\n\t\tstate: options.state,\n\t\tredirect_count,\n\t\tnav_token,\n\t\taccept: () => {\n\t\t\tif (options.invalidateAll) {\n\t\t\t\tforce_invalidation = true;\n\t\t\t}\n\n\t\t\tif (options.invalidate) {\n\t\t\t\toptions.invalidate.forEach(push_invalidated);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @param {import('./types.js').NavigationIntent} intent */\nasync function _preload_data(intent) {\n\t// Reuse the existing pending preload if it's for the same navigation.\n\t// Prevents an edge case where same preload is triggered multiple times,\n\t// then a later one is becoming the real navigation and the preload tokens\n\t// get out of sync.\n\tif (intent.id !== load_cache?.id) {\n\t\tconst preload = {};\n\t\tpreload_tokens.add(preload);\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\ttoken: preload,\n\t\t\tpromise: load_route({ ...intent, preload }).then((result) => {\n\t\t\t\tpreload_tokens.delete(preload);\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\t}\n\n\treturn load_cache.promise;\n}\n\n/**\n * @param {URL} url\n * @returns {Promise<void>}\n */\nasync function _preload_code(url) {\n\tconst route = (await get_navigation_intent(url, false))?.route;\n\n\tif (route) {\n\t\tawait Promise.all([...route.layouts, route.leaf].map((load) => load?.[1]()));\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationFinished} result\n * @param {HTMLElement} target\n * @param {boolean} hydrate\n */\nfunction initialize(result, target, hydrate) {\n\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\tcurrent = result.state;\n\n\tconst style = document.querySelector('style[data-sveltekit]');\n\tif (style) style.remove();\n\n\tObject.assign(page, /** @type {import('@sveltejs/kit').Page} */ (result.props.page));\n\n\troot = new app.root({\n\t\ttarget,\n\t\tprops: { ...result.props, stores, components },\n\t\thydrate,\n\t\t// @ts-ignore Svelte 5 specific: asynchronously instantiate the component, i.e. don't call flushSync\n\t\tsync: false\n\t});\n\n\trestore_snapshot(current_navigation_index);\n\n\tif (hydrate) {\n\t\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t},\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter',\n\t\t\tcomplete: Promise.resolve()\n\t\t};\n\n\t\tafter_navigate_callbacks.forEach((fn) => fn(navigation));\n\t}\n\n\tstarted = true;\n}\n\n/**\n *\n * @param {{\n *   url: URL;\n *   params: Record<string, string>;\n *   branch: Array<import('./types.js').BranchNode | undefined>;\n *   status: number;\n *   error: App.Error | null;\n *   route: import('types').CSRRoute | null;\n *   form?: Record<string, any> | null;\n * }} opts\n */\nfunction get_navigation_result_from_branch({ url, params, branch, status, error, route, form }) {\n\t/** @type {import('types').TrailingSlash} */\n\tlet slash = 'never';\n\n\t// if `paths.base === '/a/b/c`, then the root route is always `/a/b/c/`, regardless of\n\t// the `trailingSlash` route option, so that relative paths to JS and CSS work\n\tif (base && (url.pathname === base || url.pathname === base + '/')) {\n\t\tslash = 'always';\n\t} else {\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t}\n\n\turl.pathname = normalize_path(url.pathname, slash);\n\n\t// eslint-disable-next-line\n\turl.search = url.search; // turn `/?` into `/`\n\n\t/** @type {import('./types.js').NavigationFinished} */\n\tconst result = {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\terror,\n\t\t\troute\n\t\t},\n\t\tprops: {\n\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component),\n\t\t\tpage: clone_page(page)\n\t\t}\n\t};\n\n\tif (form !== undefined) {\n\t\tresult.props.form = form;\n\t}\n\n\tlet data = {};\n\tlet data_changed = !page;\n\n\tlet p = 0;\n\n\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\tconst node = branch[i];\n\t\tconst prev = current.branch[i];\n\n\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\tif (!node) continue;\n\n\t\tdata = { ...data, ...node.data };\n\n\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\tif (data_changed) {\n\t\t\tresult.props[`data_${p}`] = data;\n\t\t}\n\n\t\tp += 1;\n\t}\n\n\tconst page_changed =\n\t\t!current.url ||\n\t\turl.href !== current.url.href ||\n\t\tcurrent.error !== error ||\n\t\t(form !== undefined && form !== page.form) ||\n\t\tdata_changed;\n\n\tif (page_changed) {\n\t\tresult.props.page = {\n\t\t\terror,\n\t\t\tparams,\n\t\t\troute: {\n\t\t\t\tid: route?.id ?? null\n\t\t\t},\n\t\t\tstate: {},\n\t\t\tstatus,\n\t\t\turl: new URL(url),\n\t\t\tform: form ?? null,\n\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\tdata: data_changed ? data : page.data\n\t\t};\n\t}\n\n\treturn result;\n}\n\n/**\n * Call the universal load function of the given node, if it exists.\n *\n * @param {{\n *   loader: import('types').CSRPageNodeLoader;\n * \t parent: () => Promise<Record<string, any>>;\n *   url: URL;\n *   params: Record<string, string>;\n *   route: { id: string | null };\n * \t server_data_node: import('./types.js').DataNode | null;\n * }} options\n * @returns {Promise<import('./types.js').BranchNode>}\n */\nasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t/** @type {Record<string, any> | null} */\n\tlet data = null;\n\n\tlet is_tracking = true;\n\n\t/** @type {import('types').Uses} */\n\tconst uses = {\n\t\tdependencies: new Set(),\n\t\tparams: new Set(),\n\t\tparent: false,\n\t\troute: false,\n\t\turl: false,\n\t\tsearch_params: new Set()\n\t};\n\n\tconst node = await loader();\n\n\tif (DEV) {\n\t\tvalidate_page_exports(node.universal);\n\n\t\tif (node.universal && app.hash) {\n\t\t\tconst options = Object.keys(node.universal).filter((o) => o !== 'load');\n\n\t\t\tif (options.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Page options are ignored when \\`router.type === 'hash'\\` (${route.id} has ${options\n\t\t\t\t\t\t.filter((o) => o !== 'load')\n\t\t\t\t\t\t.map((o) => `'${o}'`)\n\t\t\t\t\t\t.join(', ')})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (node.universal?.load) {\n\t\t/** @param {string[]} deps */\n\t\tfunction depends(...deps) {\n\t\t\tfor (const dep of deps) {\n\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\tuses.dependencies.add(href);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\tconst load_input = {\n\t\t\troute: new Proxy(route, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tparams: new Proxy(params, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdata: server_data_node?.data ?? null,\n\t\t\turl: make_trackable(\n\t\t\t\turl,\n\t\t\t\t() => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.url = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(param) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.search_params.add(param);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tapp.hash\n\t\t\t),\n\t\t\tasync fetch(resource, init) {\n\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\tinit = {\n\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t// the headers are undefined on the server if the Headers object is empty\n\t\t\t\t\t\t// so we need to make sure they are also undefined here if there are no headers\n\t\t\t\t\t\theaders: [...resource.headers].length ? resource.headers : undefined,\n\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t...init\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst { resolved, promise } = resolve_fetch_url(resource, init, url);\n\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tdepends(resolved.href);\n\t\t\t\t}\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\tsetHeaders: () => {}, // noop\n\t\t\tdepends,\n\t\t\tparent() {\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t}\n\t\t\t\treturn parent();\n\t\t\t},\n\t\t\tuntrack(fn) {\n\t\t\t\tis_tracking = false;\n\t\t\t\ttry {\n\t\t\t\t\treturn fn();\n\t\t\t\t} finally {\n\t\t\t\t\tis_tracking = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (DEV) {\n\t\t\ttry {\n\t\t\t\tlock_fetch();\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`a load function related to route '${route.id}' returned ${\n\t\t\t\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t\t\t\t? 'a Response object'\n\t\t\t\t\t\t\t\t\t: Array.isArray(data)\n\t\t\t\t\t\t\t\t\t\t? 'an array'\n\t\t\t\t\t\t\t\t\t\t: 'a non-plain object'\n\t\t\t\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tunlock_fetch();\n\t\t\t}\n\t\t} else {\n\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t}\n\t}\n\n\treturn {\n\t\tnode,\n\t\tloader,\n\t\tserver: server_data_node,\n\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\tdata: data ?? server_data_node?.data ?? null,\n\t\tslash: node.universal?.trailingSlash ?? server_data_node?.slash\n\t};\n}\n\n/**\n * @param {Request | string | URL} input\n * @param {RequestInit | undefined} init\n * @param {URL} url\n */\nfunction resolve_fetch_url(input, init, url) {\n\tlet requested = input instanceof Request ? input.url : input;\n\n\t// we must fixup relative urls so they are resolved from the target page\n\tconst resolved = new URL(requested, url);\n\n\t// match ssr serialized data url, which is important to find cached responses\n\tif (resolved.origin === url.origin) {\n\t\trequested = resolved.href.slice(url.origin.length);\n\t}\n\n\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\tconst promise = started\n\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t: initial_fetch(requested, init);\n\n\treturn { resolved, promise };\n}\n\n/**\n * @param {boolean} parent_changed\n * @param {boolean} route_changed\n * @param {boolean} url_changed\n * @param {Set<string>} search_params_changed\n * @param {import('types').Uses | undefined} uses\n * @param {Record<string, string>} params\n */\nfunction has_changed(\n\tparent_changed,\n\troute_changed,\n\turl_changed,\n\tsearch_params_changed,\n\tuses,\n\tparams\n) {\n\tif (force_invalidation) return true;\n\n\tif (!uses) return false;\n\n\tif (uses.parent && parent_changed) return true;\n\tif (uses.route && route_changed) return true;\n\tif (uses.url && url_changed) return true;\n\n\tfor (const tracked_params of uses.search_params) {\n\t\tif (search_params_changed.has(tracked_params)) return true;\n\t}\n\n\tfor (const param of uses.params) {\n\t\tif (params[param] !== current.params[param]) return true;\n\t}\n\n\tfor (const href of uses.dependencies) {\n\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n * @param {import('./types.js').DataNode | null} [previous]\n * @returns {import('./types.js').DataNode | null}\n */\nfunction create_data_node(node, previous) {\n\tif (node?.type === 'data') return node;\n\tif (node?.type === 'skip') return previous ?? null;\n\treturn null;\n}\n\n/**\n * @param {URL | null} old_url\n * @param {URL} new_url\n */\nfunction diff_search_params(old_url, new_url) {\n\tif (!old_url) return new Set(new_url.searchParams.keys());\n\n\tconst changed = new Set([...old_url.searchParams.keys(), ...new_url.searchParams.keys()]);\n\n\tfor (const key of changed) {\n\t\tconst old_values = old_url.searchParams.getAll(key);\n\t\tconst new_values = new_url.searchParams.getAll(key);\n\n\t\tif (\n\t\t\told_values.every((value) => new_values.includes(value)) &&\n\t\t\tnew_values.every((value) => old_values.includes(value))\n\t\t) {\n\t\t\tchanged.delete(key);\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n/**\n * @param {Omit<import('./types.js').NavigationFinished['state'], 'branch'> & { error: App.Error }} opts\n * @returns {import('./types.js').NavigationFinished}\n */\nfunction preload_error({ error, url, route, params }) {\n\treturn {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\terror,\n\t\t\turl,\n\t\t\troute,\n\t\t\tparams,\n\t\t\tbranch: []\n\t\t},\n\t\tprops: {\n\t\t\tpage: clone_page(page),\n\t\t\tconstructors: []\n\t\t}\n\t};\n}\n\n/**\n * @param {import('./types.js').NavigationIntent & { preload?: {} }} intent\n * @returns {Promise<import('./types.js').NavigationResult>}\n */\nasync function load_route({ id, invalidating, url, params, route, preload }) {\n\tif (load_cache?.id === id) {\n\t\t// the preload becomes the real navigation\n\t\tpreload_tokens.delete(load_cache.token);\n\t\treturn load_cache.promise;\n\t}\n\n\tconst { errors, layouts, leaf } = route;\n\n\tconst loaders = [...layouts, leaf];\n\n\t// preload modules to avoid waterfall, but handle rejections\n\t// so they don't get reported to Sentry et al (we don't need\n\t// to act on the failures at this point)\n\terrors.forEach((loader) => loader?.().catch(() => {}));\n\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\tlet server_data = null;\n\tconst url_changed = current.url ? id !== get_page_key(current.url) : false;\n\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\tconst search_params_changed = diff_search_params(current.url, url);\n\n\tlet parent_invalid = false;\n\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\tconst previous = current.branch[i];\n\n\t\tconst invalid =\n\t\t\t!!loader?.[0] &&\n\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\thas_changed(\n\t\t\t\t\tparent_invalid,\n\t\t\t\t\troute_changed,\n\t\t\t\t\turl_changed,\n\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\tparams\n\t\t\t\t));\n\n\t\tif (invalid) {\n\t\t\t// For the next one\n\t\t\tparent_invalid = true;\n\t\t}\n\n\t\treturn invalid;\n\t});\n\n\tif (invalid_server_nodes.some(Boolean)) {\n\t\ttry {\n\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t} catch (error) {\n\t\t\tconst handled_error = await handle_error(error, { url, params, route: { id } });\n\n\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\treturn preload_error({ error: handled_error, url, params, route });\n\t\t\t}\n\n\t\t\treturn load_root_error_page({\n\t\t\t\tstatus: get_status(error),\n\t\t\t\terror: handled_error,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\n\t\tif (server_data.type === 'redirect') {\n\t\t\treturn server_data;\n\t\t}\n\t}\n\n\tconst server_data_nodes = server_data?.nodes;\n\n\tlet parent_changed = false;\n\n\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\tif (!loader) return;\n\n\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\tconst previous = current.branch[i];\n\n\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t// re-use data from previous load if it's still valid\n\t\tconst valid =\n\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\tloader[1] === previous?.loader &&\n\t\t\t!has_changed(\n\t\t\t\tparent_changed,\n\t\t\t\troute_changed,\n\t\t\t\turl_changed,\n\t\t\t\tsearch_params_changed,\n\t\t\t\tprevious.universal?.uses,\n\t\t\t\tparams\n\t\t\t);\n\t\tif (valid) return previous;\n\n\t\tparent_changed = true;\n\n\t\tif (server_data_node?.type === 'error') {\n\t\t\t// rethrow and catch below\n\t\t\tthrow server_data_node;\n\t\t}\n\n\t\treturn load_node({\n\t\t\tloader: loader[1],\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: async () => {\n\t\t\t\tconst data = {};\n\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tserver_data_node: create_data_node(\n\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : (server_data_node ?? null),\n\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t)\n\t\t});\n\t});\n\n\t// if we don't do this, rejections will be unhandled\n\tfor (const p of branch_promises) p.catch(() => {});\n\n\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\tconst branch = [];\n\n\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\tif (loaders[i]) {\n\t\t\ttry {\n\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\t\treturn preload_error({\n\t\t\t\t\t\terror: await handle_error(err, { params, url, route: { id: route.id } }),\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet status = get_status(err);\n\t\t\t\t/** @type {App.Error} */\n\t\t\t\tlet error;\n\n\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\terror = err.body;\n\t\t\t\t} else {\n\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\t\t\t\tawait update_service_worker();\n\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t}\n\n\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t}\n\n\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\tif (error_load) {\n\t\t\t\t\treturn get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\tbranch.push(undefined);\n\t\t}\n\t}\n\n\treturn get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus: 200,\n\t\terror: null,\n\t\troute,\n\t\t// Reset `form` on navigation, but not invalidation\n\t\tform: invalidating ? undefined : null\n\t});\n}\n\n/**\n * @param {number} i Start index to backtrack from\n * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n */\nasync function load_nearest_error_page(i, branch, errors) {\n\twhile (i--) {\n\t\tif (errors[i]) {\n\t\t\tlet j = i;\n\t\t\twhile (!branch[j]) j -= 1;\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tidx: j + 1,\n\t\t\t\t\tnode: {\n\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} catch {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {{\n *   status: number;\n *   error: App.Error;\n *   url: URL;\n *   route: { id: string | null }\n * }} opts\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function load_root_error_page({ status, error, url, route }) {\n\t/** @type {Record<string, string>} */\n\tconst params = {}; // error page does not have params\n\n\t/** @type {import('types').ServerDataNode | null} */\n\tlet server_data_node = null;\n\n\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\tif (default_layout_has_server_load) {\n\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t// existing root layout data\n\t\ttry {\n\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\tif (\n\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t) {\n\t\t\t\tthrow 0;\n\t\t\t}\n\n\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t} catch {\n\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\t}\n\n\ttry {\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\treturn _goto(new URL(error.location, location.href), {}, 0);\n\t\t}\n\n\t\t// TODO: this falls back to the server when a server exists, but what about SPA mode?\n\t\tthrow error;\n\t}\n}\n\n/**\n * Resolve the relative rerouted URL for a client-side navigation\n * @param {URL} url\n * @returns {Promise<URL | undefined>}\n */\nasync function get_rerouted_url(url) {\n\tconst href = url.href;\n\n\tif (reroute_cache.has(href)) {\n\t\treturn reroute_cache.get(href);\n\t}\n\n\tlet rerouted;\n\n\ttry {\n\t\tconst promise = (async () => {\n\t\t\t// reroute could alter the given URL, so we pass a copy\n\t\t\tlet rerouted =\n\t\t\t\t(await app.hooks.reroute({\n\t\t\t\t\turl: new URL(url),\n\t\t\t\t\tfetch: async (input, init) => {\n\t\t\t\t\t\treturn resolve_fetch_url(input, init, url).promise;\n\t\t\t\t\t}\n\t\t\t\t})) ?? url;\n\n\t\t\tif (typeof rerouted === 'string') {\n\t\t\t\tconst tmp = new URL(url); // do not mutate the incoming URL\n\n\t\t\t\tif (app.hash) {\n\t\t\t\t\ttmp.hash = rerouted;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.pathname = rerouted;\n\t\t\t\t}\n\n\t\t\t\trerouted = tmp;\n\t\t\t}\n\n\t\t\treturn rerouted;\n\t\t})();\n\n\t\treroute_cache.set(href, promise);\n\t\trerouted = await promise;\n\t} catch (e) {\n\t\treroute_cache.delete(href);\n\t\tif (DEV) {\n\t\t\t// in development, print the error...\n\t\t\tconsole.error(e);\n\n\t\t\t// ...and pause execution, since otherwise we will immediately reload the page\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\t// fall back to native navigation\n\t\treturn;\n\t}\n\n\treturn rerouted;\n}\n\n/**\n * Resolve the full info (which route, params, etc.) for a client-side navigation from the URL,\n * taking the reroute hook into account. If this isn't a client-side-navigation (or the URL is undefined),\n * returns undefined.\n * @param {URL | undefined} url\n * @param {boolean} invalidating\n * @returns {Promise<import('./types.js').NavigationIntent | undefined>}\n */\nasync function get_navigation_intent(url, invalidating) {\n\tif (!url) return;\n\tif (is_external_url(url, base, app.hash)) return;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tconst rerouted = await get_rerouted_url(url);\n\t\tif (!rerouted) return;\n\n\t\tconst path = get_url_path(rerouted);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\treturn {\n\t\t\t\t\tid: get_page_key(url),\n\t\t\t\t\tinvalidating,\n\t\t\t\t\troute,\n\t\t\t\t\tparams: decode_params(params),\n\t\t\t\t\turl\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/** @type {{ route?: import('types').CSRRouteServer, params: Record<string, string>}} */\n\t\tconst { route, params } = await import(\n\t\t\t/* @vite-ignore */\n\t\t\tadd_resolution_suffix(url.pathname)\n\t\t);\n\n\t\tif (!route) return;\n\n\t\treturn {\n\t\t\tid: get_page_key(url),\n\t\t\tinvalidating,\n\t\t\troute: parse_server_route(route, app.nodes),\n\t\t\tparams,\n\t\t\turl\n\t\t};\n\t}\n}\n\n/** @param {URL} url */\nfunction get_url_path(url) {\n\treturn (\n\t\tdecode_pathname(\n\t\t\tapp.hash ? url.hash.replace(/^#/, '').replace(/[?#].+/, '') : url.pathname.slice(base.length)\n\t\t) || '/'\n\t);\n}\n\n/** @param {URL} url */\nfunction get_page_key(url) {\n\treturn (app.hash ? url.hash.replace(/^#/, '') : url.pathname) + url.search;\n}\n\n/**\n * @param {{\n *   url: URL;\n *   type: import('@sveltejs/kit').Navigation[\"type\"];\n *   intent?: import('./types.js').NavigationIntent;\n *   delta?: number;\n * }} opts\n */\nfunction _before_navigate({ url, type, intent, delta }) {\n\tlet should_block = false;\n\n\tconst nav = create_navigation(current, intent, url, type);\n\n\tif (delta !== undefined) {\n\t\tnav.navigation.delta = delta;\n\t}\n\n\tconst cancellable = {\n\t\t...nav.navigation,\n\t\tcancel: () => {\n\t\t\tshould_block = true;\n\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t}\n\t};\n\n\tif (!is_navigating) {\n\t\t// Don't run the event during redirects\n\t\tbefore_navigate_callbacks.forEach((fn) => fn(cancellable));\n\t}\n\n\treturn should_block ? null : nav;\n}\n\n/**\n * @param {{\n *   type: import('@sveltejs/kit').NavigationType;\n *   url: URL;\n *   popped?: {\n *     state: Record<string, any>;\n *     scroll: { x: number, y: number };\n *     delta: number;\n *   };\n *   keepfocus?: boolean;\n *   noscroll?: boolean;\n *   replace_state?: boolean;\n *   state?: Record<string, any>;\n *   redirect_count?: number;\n *   nav_token?: {};\n *   accept?: () => void;\n *   block?: () => void;\n * }} opts\n */\nasync function navigate({\n\ttype,\n\turl,\n\tpopped,\n\tkeepfocus,\n\tnoscroll,\n\treplace_state,\n\tstate = {},\n\tredirect_count = 0,\n\tnav_token = {},\n\taccept = noop,\n\tblock = noop\n}) {\n\tconst prev_token = token;\n\ttoken = nav_token;\n\n\tconst intent = await get_navigation_intent(url, false);\n\tconst nav =\n\t\ttype === 'enter'\n\t\t\t? create_navigation(current, intent, url, type)\n\t\t\t: _before_navigate({ url, type, delta: popped?.delta, intent });\n\n\tif (!nav) {\n\t\tblock();\n\t\tif (token === nav_token) token = prev_token;\n\t\treturn;\n\t}\n\n\t// store this before calling `accept()`, which may change the index\n\tconst previous_history_index = current_history_index;\n\tconst previous_navigation_index = current_navigation_index;\n\n\taccept();\n\n\tis_navigating = true;\n\n\tif (started && nav.navigation.type !== 'enter') {\n\t\tstores.navigating.set((navigating.current = nav.navigation));\n\t}\n\n\tlet navigation_result = intent && (await load_route(intent));\n\n\tif (!navigation_result) {\n\t\tif (is_external_url(url, base, app.hash)) {\n\t\t\tif (DEV && app.hash) {\n\t\t\t\t// Special case for hash mode during DEV: If someone accidentally forgets to use a hash for the link,\n\t\t\t\t// they would end up here in an endless loop. Fall back to error page in that case\n\t\t\t\tnavigation_result = await server_fallback(\n\t\t\t\t\turl,\n\t\t\t\t\t{ id: null },\n\t\t\t\t\tawait handle_error(\n\t\t\t\t\t\tnew SvelteKitError(\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t'Not Found',\n\t\t\t\t\t\t\t`Not found: ${url.pathname} (did you forget the hash?)`\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\t404\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn await native_navigation(url);\n\t\t\t}\n\t\t} else {\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new SvelteKitError(404, 'Not Found', `Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\t}\n\n\t// if this is an internal navigation intent, use the normalized\n\t// URL for the rest of the function\n\turl = intent?.url || url;\n\n\t// abort if user navigated during update\n\tif (token !== nav_token) {\n\t\tnav.reject(new Error('navigation aborted'));\n\t\treturn false;\n\t}\n\n\tif (navigation_result.type === 'redirect') {\n\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\tif (redirect_count >= 20) {\n\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\tstatus: 500,\n\t\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\turl,\n\t\t\t\troute: { id: null }\n\t\t\t});\n\t\t} else {\n\t\t\tawait _goto(new URL(navigation_result.location, url).href, {}, redirect_count + 1, nav_token);\n\t\t\treturn false;\n\t\t}\n\t} else if (/** @type {number} */ (navigation_result.props.page.status) >= 400) {\n\t\tconst updated = await stores.updated.check();\n\t\tif (updated) {\n\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\tawait update_service_worker();\n\t\t\tawait native_navigation(url);\n\t\t}\n\t}\n\n\t// reset invalidation only after a finished navigation. If there are redirects or\n\t// additional invalidations, they should get the same invalidation treatment\n\treset_invalidation();\n\n\tupdating = true;\n\n\tupdate_scroll_positions(previous_history_index);\n\tcapture_snapshot(previous_navigation_index);\n\n\t// ensure the url pathname matches the page's trailing slash option\n\tif (navigation_result.props.page.url.pathname !== url.pathname) {\n\t\turl.pathname = navigation_result.props.page.url.pathname;\n\t}\n\n\tstate = popped ? popped.state : state;\n\n\tif (!popped) {\n\t\t// this is a new navigation, rather than a popstate\n\t\tconst change = replace_state ? 0 : 1;\n\n\t\tconst entry = {\n\t\t\t[HISTORY_INDEX]: (current_history_index += change),\n\t\t\t[NAVIGATION_INDEX]: (current_navigation_index += change),\n\t\t\t[STATES_KEY]: state\n\t\t};\n\n\t\tconst fn = replace_state ? history.replaceState : history.pushState;\n\t\tfn.call(history, entry, '', url);\n\n\t\tif (!replace_state) {\n\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t}\n\t}\n\n\t// reset preload synchronously after the history state has been set to avoid race conditions\n\tload_cache = null;\n\n\tnavigation_result.props.page.state = state;\n\n\tif (started) {\n\t\tcurrent = navigation_result.state;\n\n\t\t// reset url before updating page store\n\t\tif (navigation_result.props.page) {\n\t\t\tnavigation_result.props.page.url = url;\n\t\t}\n\n\t\tconst after_navigate = (\n\t\t\tawait Promise.all(\n\t\t\t\tArray.from(on_navigate_callbacks, (fn) =>\n\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t)\n\t\t\t)\n\t\t).filter(/** @returns {value is () => void} */ (value) => typeof value === 'function');\n\n\t\tif (after_navigate.length > 0) {\n\t\t\tfunction cleanup() {\n\t\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\t\tafter_navigate_callbacks.delete(fn);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tafter_navigate.push(cleanup);\n\n\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\tafter_navigate_callbacks.add(fn);\n\t\t\t});\n\t\t}\n\n\t\troot.$set(navigation_result.props);\n\t\tupdate(navigation_result.props.page);\n\t\thas_navigated = true;\n\t} else {\n\t\tinitialize(navigation_result, target, false);\n\t}\n\n\tconst { activeElement } = document;\n\n\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\tawait tick();\n\n\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\tconst scroll = popped ? popped.scroll : noscroll ? scroll_state() : null;\n\n\tif (autoscroll) {\n\t\tconst deep_linked =\n\t\t\turl.hash &&\n\t\t\tdocument.getElementById(\n\t\t\t\tdecodeURIComponent(app.hash ? (url.hash.split('#')[2] ?? '') : url.hash.slice(1))\n\t\t\t);\n\t\tif (scroll) {\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t} else if (deep_linked) {\n\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t// CSS properties.\n\t\t\tdeep_linked.scrollIntoView();\n\t\t} else {\n\t\t\tscrollTo(0, 0);\n\t\t}\n\t}\n\n\tconst changed_focus =\n\t\t// reset focus only if any manual focus management didn't override it\n\t\tdocument.activeElement !== activeElement &&\n\t\t// also refocus when activeElement is body already because the\n\t\t// focus event might not have been fired on it yet\n\t\tdocument.activeElement !== document.body;\n\n\tif (!keepfocus && !changed_focus) {\n\t\treset_focus();\n\t}\n\n\tautoscroll = true;\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\n\tis_navigating = false;\n\n\tif (type === 'popstate') {\n\t\trestore_snapshot(current_navigation_index);\n\t}\n\n\tnav.fulfil(undefined);\n\n\tafter_navigate_callbacks.forEach((fn) =>\n\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t);\n\n\tstores.navigating.set((navigating.current = null));\n\n\tupdating = false;\n}\n\n/**\n * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n * @param {URL} url\n * @param {{ id: string | null }} route\n * @param {App.Error} error\n * @param {number} status\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function server_fallback(url, route, error, status) {\n\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t// which means no SSR, which means we would end up in an endless loop\n\t\treturn await load_root_error_page({\n\t\t\tstatus,\n\t\t\terror,\n\t\t\turl,\n\t\t\troute\n\t\t});\n\t}\n\n\tif (DEV && status !== 404) {\n\t\tconsole.error(\n\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t);\n\n\t\tdebugger; // eslint-disable-line\n\t}\n\n\treturn await native_navigation(url);\n}\n\nif (import.meta.hot) {\n\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\tif (current.error) location.reload();\n\t});\n}\n\n/** @typedef {(typeof PRELOAD_PRIORITIES)['hover'] | (typeof PRELOAD_PRIORITIES)['tap']} PreloadDataPriority */\n\nfunction setup_preload() {\n\t/** @type {NodeJS.Timeout} */\n\tlet mousemove_timeout;\n\t/** @type {Element} */\n\tlet current_a;\n\t/** @type {PreloadDataPriority} */\n\tlet current_priority;\n\n\tcontainer.addEventListener('mousemove', (event) => {\n\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\tclearTimeout(mousemove_timeout);\n\t\tmousemove_timeout = setTimeout(() => {\n\t\t\tvoid preload(target, PRELOAD_PRIORITIES.hover);\n\t\t}, 20);\n\t});\n\n\t/** @param {Event} event */\n\tfunction tap(event) {\n\t\tif (event.defaultPrevented) return;\n\t\tvoid preload(/** @type {Element} */ (event.composedPath()[0]), PRELOAD_PRIORITIES.tap);\n\t}\n\n\tcontainer.addEventListener('mousedown', tap);\n\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\tconst observer = new IntersectionObserver(\n\t\t(entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tvoid _preload_code(new URL(/** @type {HTMLAnchorElement} */ (entry.target).href));\n\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{ threshold: 0 }\n\t);\n\n\t/**\n\t * @param {Element} element\n\t * @param {PreloadDataPriority} priority\n\t */\n\tasync function preload(element, priority) {\n\t\tconst a = find_anchor(element, container);\n\n\t\t// we don't want to preload data again if the user has already hovered/tapped\n\t\tconst interacted = a === current_a && priority >= current_priority;\n\t\tif (!a || interacted) return;\n\n\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\tif (external || download) return;\n\n\t\tconst options = get_router_options(a);\n\n\t\t// we don't want to preload data for a page we're already on\n\t\tconst same_url = url && get_page_key(current.url) === get_page_key(url);\n\t\tif (options.reload || same_url) return;\n\n\t\tif (priority <= options.preload_data) {\n\t\t\tcurrent_a = a;\n\t\t\t// we don't want to preload data again on tap if we've already preloaded it on hover\n\t\t\tcurrent_priority = PRELOAD_PRIORITIES.tap;\n\n\t\t\tconst intent = await get_navigation_intent(url, false);\n\t\t\tif (!intent) return;\n\n\t\t\tif (DEV) {\n\t\t\t\tvoid _preload_data(intent).then((result) => {\n\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t'See https://svelte.dev/docs/kit/link-options for more info'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvoid _preload_data(intent);\n\t\t\t}\n\t\t} else if (priority <= options.preload_code) {\n\t\t\tcurrent_a = a;\n\t\t\tcurrent_priority = priority;\n\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t}\n\t}\n\n\tfunction after_navigate() {\n\t\tobserver.disconnect();\n\n\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\t\tif (external || download) continue;\n\n\t\t\tconst options = get_router_options(a);\n\t\t\tif (options.reload) continue;\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\tobserver.observe(a);\n\t\t\t}\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t\t}\n\t\t}\n\t}\n\n\tafter_navigate_callbacks.add(after_navigate);\n\tafter_navigate();\n}\n\n/**\n * @param {unknown} error\n * @param {import('@sveltejs/kit').NavigationEvent} event\n * @returns {import('types').MaybePromise<App.Error>}\n */\nfunction handle_error(error, event) {\n\tif (error instanceof HttpError) {\n\t\treturn error.body;\n\t}\n\n\tif (DEV) {\n\t\terrored = true;\n\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t}\n\n\tconst status = get_status(error);\n\tconst message = get_message(error);\n\n\treturn (\n\t\tapp.hooks.handleError({ error, event, status, message }) ?? /** @type {any} */ ({ message })\n\t);\n}\n\n/**\n * @template {Function} T\n * @param {Set<T>} callbacks\n * @param {T} callback\n */\nfunction add_navigation_callback(callbacks, callback) {\n\tonMount(() => {\n\t\tcallbacks.add(callback);\n\n\t\treturn () => {\n\t\t\tcallbacks.delete(callback);\n\t\t};\n\t});\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport function afterNavigate(callback) {\n\tadd_navigation_callback(after_navigate_callbacks, callback);\n}\n\n/**\n * A navigation interceptor that triggers before we navigate to a URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n *\n * Calling `cancel()` will prevent the navigation from completing. If `navigation.type === 'leave'` — meaning the user is navigating away from the app (or closing the tab) — calling `cancel` will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response.\n *\n * When a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), `navigation.to.route.id` will be `null`.\n *\n * If the navigation will (if not cancelled) cause the document to unload — in other words `'leave'` navigations and `'link'` navigations where `navigation.to.route === null` — `navigation.willUnload` is `true`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport function beforeNavigate(callback) {\n\tadd_navigation_callback(before_navigate_callbacks, callback);\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL except during full-page navigations.\n *\n * If you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n *\n * If a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n *\n * `onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>} callback\n * @returns {void}\n */\nexport function onNavigate(callback) {\n\tadd_navigation_callback(on_navigate_callbacks, callback);\n}\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport function disableScrollHandling() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call disableScrollHandling() on the server');\n\t}\n\n\tif (DEV && started && !updating) {\n\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t}\n\n\tif (updating || !started) {\n\t\tautoscroll = false;\n\t}\n}\n\n/**\n * Allows you to navigate programmatically to a given route, with options such as keeping the current element focused.\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n *\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://svelte.dev/docs/kit/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [opts.invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://svelte.dev/docs/kit/load#rerunning-load-functions for more info on invalidation.\n * @param {Array<string | URL | ((url: URL) => boolean)>} [opts.invalidate] Causes any load functions to re-run if they depend on one of the urls\n * @param {App.PageState} [opts.state] An optional object that will be available as `page.state`\n * @returns {Promise<void>}\n */\nexport function goto(url, opts = {}) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call goto(...) on the server');\n\t}\n\n\turl = new URL(resolve_url(url));\n\n\tif (url.origin !== origin) {\n\t\treturn Promise.reject(\n\t\t\tnew Error(\n\t\t\t\tDEV\n\t\t\t\t\t? `Cannot use \\`goto\\` with an external URL. Use \\`window.location = \"${url}\"\\` instead`\n\t\t\t\t\t: 'goto: invalid URL'\n\t\t\t)\n\t\t);\n\t}\n\n\treturn _goto(url, opts, 0);\n}\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n * @returns {Promise<void>}\n */\nexport function invalidate(resource) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidate(...) on the server');\n\t}\n\n\tpush_invalidated(resource);\n\n\treturn _invalidate();\n}\n\n/**\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n */\nfunction push_invalidated(resource) {\n\tif (typeof resource === 'function') {\n\t\tinvalidated.push(resource);\n\t} else {\n\t\tconst { href } = new URL(resource, location.href);\n\t\tinvalidated.push((url) => url.href === href);\n\t}\n}\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @returns {Promise<void>}\n */\nexport function invalidateAll() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidateAll() on the server');\n\t}\n\n\tforce_invalidation = true;\n\treturn _invalidate();\n}\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves with the result of running the new route's `load` functions once the preload is complete.\n *\n * @param {string} href Page to preload\n * @returns {Promise<{ type: 'loaded'; status: number; data: Record<string, any> } | { type: 'redirect'; location: string }>}\n */\nexport async function preloadData(href) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadData(...) on the server');\n\t}\n\n\tconst url = resolve_url(href);\n\tconst intent = await get_navigation_intent(url, false);\n\n\tif (!intent) {\n\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t}\n\n\tconst result = await _preload_data(intent);\n\tif (result.type === 'redirect') {\n\t\treturn {\n\t\t\ttype: result.type,\n\t\t\tlocation: result.location\n\t\t};\n\t}\n\n\tconst { status, data } = result.props.page ?? page;\n\treturn { type: result.type, status, data };\n}\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @param {string} pathname\n * @returns {Promise<void>}\n */\nexport async function preloadCode(pathname) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadCode(...) on the server');\n\t}\n\n\tconst url = new URL(pathname, current.url);\n\n\tif (DEV) {\n\t\tif (!pathname.startsWith('/')) {\n\t\t\tthrow new Error(\n\t\t\t\t'argument passed to preloadCode must be a pathname (i.e. \"/about\" rather than \"http://example.com/about\"'\n\t\t\t);\n\t\t}\n\n\t\tif (!pathname.startsWith(base)) {\n\t\t\tthrow new Error(\n\t\t\t\t`pathname passed to preloadCode must start with \\`paths.base\\` (i.e. \"${base}${pathname}\" rather than \"${pathname}\")`\n\t\t\t);\n\t\t}\n\n\t\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\t\tconst rerouted = await get_rerouted_url(url);\n\t\t\tif (!rerouted || !routes.find((route) => route.exec(get_url_path(rerouted)))) {\n\t\t\t\tthrow new Error(`'${pathname}' did not match any routes`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _preload_code(url);\n}\n\n/**\n * Programmatically create a new history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function pushState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call pushState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call pushState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tupdate_scroll_positions(current_history_index);\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: (current_history_index += 1),\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.pushState(opts, '', resolve_url(url));\n\thas_navigated = true;\n\n\tpage.state = state;\n\troot.$set({\n\t\t// we need to assign a new page object so that subscribers are correctly notified\n\t\tpage: clone_page(page)\n\t});\n\n\tclear_onward_history(current_history_index, current_navigation_index);\n}\n\n/**\n * Programmatically replace the current history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function replaceState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call replaceState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call replaceState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: current_history_index,\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.replaceState(opts, '', resolve_url(url));\n\n\tpage.state = state;\n\troot.$set({\n\t\tpage: clone_page(page)\n\t});\n}\n\n/**\n * This action updates the `form` property of the current page with the given data and updates `page.status`.\n * In case of an error, it redirects to the nearest error page.\n * @template {Record<string, unknown> | undefined} Success\n * @template {Record<string, unknown> | undefined} Failure\n * @param {import('@sveltejs/kit').ActionResult<Success, Failure>} result\n * @returns {Promise<void>}\n */\nexport async function applyAction(result) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call applyAction(...) on the server');\n\t}\n\n\tif (result.type === 'error') {\n\t\tconst url = new URL(location.href);\n\n\t\tconst { branch, route } = current;\n\t\tif (!route) return;\n\n\t\tconst error_load = await load_nearest_error_page(current.branch.length, branch, route.errors);\n\t\tif (error_load) {\n\t\t\tconst navigation_result = get_navigation_result_from_branch({\n\t\t\t\turl,\n\t\t\t\tparams: current.params,\n\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\tstatus: result.status ?? 500,\n\t\t\t\terror: result.error,\n\t\t\t\troute\n\t\t\t});\n\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\troot.$set(navigation_result.props);\n\t\t\tupdate(navigation_result.props.page);\n\n\t\t\tvoid tick().then(reset_focus);\n\t\t}\n\t} else if (result.type === 'redirect') {\n\t\tawait _goto(result.location, { invalidateAll: true }, 0);\n\t} else {\n\t\tpage.form = result.data;\n\t\tpage.status = result.status;\n\n\t\t/** @type {Record<string, any>} */\n\t\troot.$set({\n\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t// after use:enhance reset the form....\n\t\t\tform: null,\n\t\t\tpage: clone_page(page)\n\t\t});\n\n\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\tawait tick();\n\t\troot.$set({ form: result.data });\n\n\t\tif (result.type === 'success') {\n\t\t\treset_focus();\n\t\t}\n\t}\n}\n\nfunction _start_router() {\n\thistory.scrollRestoration = 'manual';\n\n\t// Adopted from Nuxt.js\n\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t// and back-navigation from other pages to use the browser to restore the\n\t// scrolling position.\n\taddEventListener('beforeunload', (e) => {\n\t\tlet should_block = false;\n\n\t\tpersist_state();\n\n\t\tif (!is_navigating) {\n\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\tconst navigation = {\n\t\t\t\t...nav.navigation,\n\t\t\t\tcancel: () => {\n\t\t\t\t\tshould_block = true;\n\t\t\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbefore_navigate_callbacks.forEach((fn) => fn(navigation));\n\t\t}\n\n\t\tif (should_block) {\n\t\t\te.preventDefault();\n\t\t\te.returnValue = '';\n\t\t} else {\n\t\t\thistory.scrollRestoration = 'auto';\n\t\t}\n\t});\n\n\taddEventListener('visibilitychange', () => {\n\t\tif (document.visibilityState === 'hidden') {\n\t\t\tpersist_state();\n\t\t}\n\t});\n\n\t// @ts-expect-error this isn't supported everywhere yet\n\tif (!navigator.connection?.saveData) {\n\t\tsetup_preload();\n\t}\n\n\t/** @param {MouseEvent} event */\n\tcontainer.addEventListener('click', async (event) => {\n\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\tif (event.button || event.which !== 1) return;\n\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\tif (!a) return;\n\n\t\tconst { url, external, target, download } = get_link_info(a, base, app.hash);\n\t\tif (!url) return;\n\n\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\tif (target === '_parent' || target === '_top') {\n\t\t\tif (window.parent !== window) return;\n\t\t} else if (target && target !== '_self') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = get_router_options(a);\n\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t// See:\n\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\tif (\n\t\t\t!is_svg_a_element &&\n\t\t\turl.protocol !== location.protocol &&\n\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t)\n\t\t\treturn;\n\n\t\tif (download) return;\n\n\t\tconst [nonhash, hash] = (app.hash ? url.hash.replace(/^#/, '') : url.href).split('#');\n\t\tconst same_pathname = nonhash === strip_hash(location);\n\n\t\t// Ignore the following but fire beforeNavigate\n\t\tif (external || (options.reload && (!same_pathname || !hash))) {\n\t\t\tif (_before_navigate({ url, type: 'link' })) {\n\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t// being called when the page unloads\n\t\t\t\tis_navigating = true;\n\t\t\t} else {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t// This will ensure the `hashchange` event is fired\n\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\tif (hash !== undefined && same_pathname) {\n\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t// history state value without any signal that we can detect.\n\t\t\tconst [, current_hash] = current.url.href.split('#');\n\t\t\tif (current_hash === hash) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// We're already on /# and click on a link that goes to /#, or we're on\n\t\t\t\t// /#top and click on a link that goes to /#top. In those cases just go to\n\t\t\t\t// the top of the page, and avoid a history change.\n\t\t\t\tif (hash === '' || (hash === 'top' && a.ownerDocument.getElementById('top') === null)) {\n\t\t\t\t\twindow.scrollTo({ top: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconst element = a.ownerDocument.getElementById(decodeURIComponent(hash));\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\telement.scrollIntoView();\n\t\t\t\t\t\telement.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\thash_navigating = true;\n\n\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\tupdate_url(url);\n\n\t\t\tif (!options.replace_state) return;\n\n\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\thash_navigating = false;\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// allow the browser to repaint before navigating —\n\t\t// this prevents INP scores being penalised\n\t\tawait new Promise((fulfil) => {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tsetTimeout(fulfil, 0);\n\t\t\t});\n\n\t\t\tsetTimeout(fulfil, 100); // fallback for edge case where rAF doesn't fire because e.g. tab was backgrounded\n\t\t});\n\n\t\tawait navigate({\n\t\t\ttype: 'link',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\tcontainer.addEventListener('submit', (event) => {\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t);\n\n\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (event.submitter);\n\n\t\tconst target = submitter?.formTarget || form.target;\n\n\t\tif (target === '_blank') return;\n\n\t\tconst method = submitter?.formMethod || form.method;\n\n\t\tif (method !== 'get') return;\n\n\t\t// It is impossible to use form actions with hash router, so we just ignore handling them here\n\t\tconst url = new URL(\n\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t);\n\n\t\tif (is_external_url(url, base, false)) return;\n\n\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\tconst options = get_router_options(event_form);\n\t\tif (options.reload) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tconst data = new FormData(event_form);\n\n\t\tconst submitter_name = submitter?.getAttribute('name');\n\t\tif (submitter_name) {\n\t\t\tdata.append(submitter_name, submitter?.getAttribute('value') ?? '');\n\t\t}\n\n\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\turl.search = new URLSearchParams(data).toString();\n\n\t\tvoid navigate({\n\t\t\ttype: 'form',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\taddEventListener('popstate', async (event) => {\n\t\tif (event.state?.[HISTORY_INDEX]) {\n\t\t\tconst history_index = event.state[HISTORY_INDEX];\n\t\t\ttoken = {};\n\n\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\tif (history_index === current_history_index) return;\n\n\t\t\tconst scroll = scroll_positions[history_index];\n\t\t\tconst state = event.state[STATES_KEY] ?? {};\n\t\t\tconst url = new URL(event.state[PAGE_URL_KEY] ?? location.href);\n\t\t\tconst navigation_index = event.state[NAVIGATION_INDEX];\n\t\t\tconst is_hash_change = current.url ? strip_hash(location) === strip_hash(current.url) : false;\n\t\t\tconst shallow =\n\t\t\t\tnavigation_index === current_navigation_index && (has_navigated || is_hash_change);\n\n\t\t\tif (shallow) {\n\t\t\t\t// We don't need to navigate, we just need to update scroll and/or state.\n\t\t\t\t// This happens with hash links and `pushState`/`replaceState`. The\n\t\t\t\t// exception is if we haven't navigated yet, since we could have\n\t\t\t\t// got here after a modal navigation then a reload\n\t\t\t\tif (state !== page.state) {\n\t\t\t\t\tpage.state = state;\n\t\t\t\t}\n\n\t\t\t\tupdate_url(url);\n\n\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\tif (scroll) scrollTo(scroll.x, scroll.y);\n\n\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta = history_index - current_history_index;\n\n\t\t\tawait navigate({\n\t\t\t\ttype: 'popstate',\n\t\t\t\turl,\n\t\t\t\tpopped: {\n\t\t\t\t\tstate,\n\t\t\t\t\tscroll,\n\t\t\t\t\tdelta\n\t\t\t\t},\n\t\t\t\taccept: () => {\n\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\tcurrent_navigation_index = navigation_index;\n\t\t\t\t},\n\t\t\t\tblock: () => {\n\t\t\t\t\thistory.go(-delta);\n\t\t\t\t},\n\t\t\t\tnav_token: token\n\t\t\t});\n\t\t} else {\n\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\tif (!hash_navigating) {\n\t\t\t\tconst url = new URL(location.href);\n\t\t\t\tupdate_url(url);\n\n\t\t\t\t// if the user edits the hash via the browser URL bar, trigger a full-page\n\t\t\t\t// reload to align with pathname router behavior\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.reload();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\taddEventListener('hashchange', () => {\n\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t// we need to update history, otherwise we have to leave it alone\n\t\tif (hash_navigating) {\n\t\t\thash_navigating = false;\n\t\t\thistory.replaceState(\n\t\t\t\t{\n\t\t\t\t\t...history.state,\n\t\t\t\t\t[HISTORY_INDEX]: ++current_history_index,\n\t\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t\t},\n\t\t\t\t'',\n\t\t\t\tlocation.href\n\t\t\t);\n\t\t}\n\t});\n\n\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\tfor (const link of document.querySelectorAll('link')) {\n\t\tif (ICON_REL_ATTRIBUTES.has(link.rel)) {\n\t\t\tlink.href = link.href; // eslint-disable-line\n\t\t}\n\t}\n\n\taddEventListener('pageshow', (event) => {\n\t\t// If the user navigates to another site and then uses the back button and\n\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t// the navigation away from it was successful.\n\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\tif (event.persisted) {\n\t\t\tstores.navigating.set((navigating.current = null));\n\t\t}\n\t});\n\n\t/**\n\t * @param {URL} url\n\t */\n\tfunction update_url(url) {\n\t\tcurrent.url = page.url = url;\n\t\tstores.page.set(clone_page(page));\n\t\tstores.page.notify();\n\t}\n}\n\n/**\n * @param {HTMLElement} target\n * @param {import('./types.js').HydrateOptions} opts\n */\nasync function _hydrate(\n\ttarget,\n\t{ status = 200, error, node_ids, params, route, server_route, data: server_data_nodes, form }\n) {\n\thydrated = true;\n\n\tconst url = new URL(location.href);\n\n\t/** @type {import('types').CSRRoute | undefined} */\n\tlet parsed_route;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t// of determining the params on the client side.\n\t\t\t({ params = {}, route = { id: null } } = (await get_navigation_intent(url, false)) || {});\n\t\t}\n\n\t\tparsed_route = routes.find(({ id }) => id === route.id);\n\t} else {\n\t\t// undefined in case of 404\n\t\tif (server_route) {\n\t\t\tparsed_route = route = parse_server_route(server_route, app.nodes);\n\t\t} else {\n\t\t\troute = { id: null };\n\t\t\tparams = {};\n\t\t}\n\t}\n\n\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\tlet result;\n\tlet hydrate = true;\n\n\ttry {\n\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\tif (server_data_node?.uses) {\n\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: app.nodes[n],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t});\n\t\t});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t// so that error boundaries can be lined up correctly\n\t\tif (parsed_route) {\n\t\t\tconst layouts = parsed_route.layouts;\n\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresult = get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus,\n\t\t\terror,\n\t\t\tform,\n\t\t\troute: parsed_route ?? null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t// a redirect but only in the browser\n\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\treturn;\n\t\t}\n\n\t\tresult = await load_root_error_page({\n\t\t\tstatus: get_status(error),\n\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\turl,\n\t\t\troute\n\t\t});\n\n\t\ttarget.textContent = '';\n\t\thydrate = false;\n\t}\n\n\tif (result.props.page) {\n\t\tresult.props.page.state = {};\n\t}\n\n\tinitialize(result, target, hydrate);\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\t// use window.fetch directly to allow using a 3rd party-patched fetch implementation\n\tconst fetcher = DEV ? dev_fetch : window.fetch;\n\tconst res = await fetcher(data_url.href, {});\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\t// if `__data.json` doesn't exist or the server has an internal error,\n\t\t// avoid parsing the HTML error page as a JSON\n\t\t/** @type {string | undefined} */\n\t\tlet message;\n\t\tif (res.headers.get('content-type')?.includes('application/json')) {\n\t\t\tmessage = await res.json();\n\t\t} else if (res.status === 404) {\n\t\t\tmessage = 'Not Found';\n\t\t} else if (res.status === 500) {\n\t\t\tmessage = 'Internal Error';\n\t\t}\n\t\tthrow new HttpError(res.status, message);\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\t\tconst decoder = new TextDecoder();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\t...app.decoders,\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : decoder.decode(value, { stream: true }); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url,\n\t\tsearch_params: new Set(uses?.search_params ?? [])\n\t};\n}\n\nfunction reset_focus() {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\t\t// We try to mimic browsers' behaviour as closely as possible by targeting the\n\t\t// first scrollable region, but unfortunately it's not a perfect match — e.g.\n\t\t// shift-tabbing won't immediately cycle up from the end of the page on Chromium\n\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\tconst root = document.body;\n\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\troot.tabIndex = -1;\n\t\t// @ts-expect-error\n\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\tif (tabindex !== null) {\n\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t} else {\n\t\t\troot.removeAttribute('tabindex');\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @template {import('@sveltejs/kit').NavigationType} T\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {T} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {Omit<import('@sveltejs/kit').Navigation, 'type'> & { type: T }} */\n\tconst navigation = {\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t};\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\n/**\n * TODO: remove this in 3.0 when the page store is also removed\n *\n * We need to assign a new page object so that subscribers are correctly notified.\n * However, spreading `{ ...page }` returns an empty object so we manually\n * assign to each property instead.\n *\n * @param {import('@sveltejs/kit').Page} page\n */\nfunction clone_page(page) {\n\treturn {\n\t\tdata: page.data,\n\t\terror: page.error,\n\t\tform: page.form,\n\t\tparams: page.params,\n\t\troute: page.route,\n\t\tstate: page.state,\n\t\tstatus: page.status,\n\t\turl: page.url\n\t};\n}\n\n/**\n * @param {URL} url\n * @returns {URL}\n */\nfunction decode_hash(url) {\n\tconst new_url = new URL(url);\n\t// Safari, for some reason, does change # to %23, when entered through the address bar\n\tnew_url.hash = decodeURIComponent(url.hash);\n\treturn new_url;\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":["hash","parse","target","base","set","updated","hydrated","location","$.state","storage.get","current_history_index","current_navigation_index","_b","_a","_c","_d","storage.set","error","rerouted","state","devalue.unflatten","node","root","current","page"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}