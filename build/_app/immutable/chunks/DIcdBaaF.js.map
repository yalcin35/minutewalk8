{"version":3,"mappings":";;;AAAA,gBAAe;ACGH,MAAC,UAAU;ACEvBA,qBAAS,MAAM,0BAAM,OAAO,eAAmB,GAAC;AAChDA,qBAAS,MAAM,0BAAM,OAAO,eAAmB,GAAC;AAChDA,qBAAS,MAAM,0BAAM,OAAO,eAAmB,GAAC;AAGnC,sBAAgB,SAAS,KAAK;AAGpC,SAAS,WAAW;AACrB;AACG;AAAA,MACH,gBAAgB;AAAA,MAChB,eAAe,UAAU,qBAAqB;AAAA,KAC/C;AAAA,WACM,OAAO;AACN,kBAAM,8BAA8B,KAAK;AAEpC;AACXC,cAAO,IAAI,IAAI;AAAA;AAAA,EACjB;AAEJ;AAGA,SAAS,mBAAmB;AAEpB,oBAAY,OAAO,SAAS,aAAa;AAC/C,gBAAc,IAAI,SAAS;AAG3B,MAAI,WAAW;AACN;AAAA;AAIH,sBAAc,aAAa,QAAQ,UAAU;AACnD,MAAI,aAAa;AACR,YAAC,MAAM,MAAM,IAAI,EAAE,SAAS,WAAW,IAAI,cAAc;AAAA;AAIlE,QAAM,gBAAgB,UAAU,SAAS,MAAM,GAAG,EAAE,CAAC;AAC9C,UAAC,MAAM,MAAM,IAAI,EAAE,SAAS,aAAa,IAAI,gBAAgB;AACtE;AAGO,SAAS,UAAU,WAAmB;AAC9B;AAEL,sBAAY,OAAO,SAAS,aAAa;AAC/C,kBAAc,IAAI,SAAS;AAG3B,QAAI,WAAW;AACb;AAAA;AAGE;AACW,2BAAQ,YAAY,SAAS;AAAA,aACnC,OAAO;AACN,oBAAM,uCAAuC,KAAK;AAAA;AAAA,EAC5D;AAEFA,UAAO,IAAI,SAAS;AACtB","names":["register","locale"],"ignoreList":[0,1],"sources":["../../../../../../node_modules/esm-env/true.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/app/environment/index.js","../../../../../../src/lib/i18n/index.ts"],"sourcesContent":["export default true;\n","import { BROWSER, DEV } from 'esm-env';\nexport { building, version } from '__sveltekit/environment';\n\nexport const browser = BROWSER;\n\nexport const dev = DEV;\n","import { browser } from '$app/environment';\nimport { init, register, locale, dictionary } from 'svelte-i18n';\nimport { writable } from 'svelte/store';\n\n// Register locales\nregister('en', () => import('./locales/en.json'));\nregister('de', () => import('./locales/de.json'));\nregister('tr', () => import('./locales/tr.json'));\n\n// Create a store to track if we're on the landing page\nexport const isLandingPage = writable(false);\n\n// Initialize i18n with proper error handling\nexport function initI18n() {\n  try {\n    init({\n      fallbackLocale: 'en',\n      initialLocale: browser ? getInitialLocale() : 'en',\n    });\n  } catch (error) {\n    console.error('Failed to initialize i18n:', error);\n    // Fallback to English if initialization fails\n    if (browser) {\n      locale.set('en');\n    }\n  }\n}\n\n// Get initial locale from localStorage or browser settings\nfunction getInitialLocale() {\n  // Check if we're on the landing page (/)\n  const isLanding = window.location.pathname === '/';\n  isLandingPage.set(isLanding);\n  \n  // Always use English for landing page\n  if (isLanding) {\n    return 'en';\n  }\n  \n  // First, check localStorage\n  const savedLocale = localStorage.getItem('language');\n  if (savedLocale) {\n    return ['en', 'de', 'tr'].includes(savedLocale) ? savedLocale : 'en';\n  }\n\n  // Then, check browser language\n  const browserLocale = navigator.language.split('-')[0];\n  return ['en', 'de', 'tr'].includes(browserLocale) ? browserLocale : 'en';\n}\n\n// Set locale and save to localStorage with error handling\nexport function setLocale(newLocale: string) {\n  if (browser) {\n    // Check if we're on the landing page\n    const isLanding = window.location.pathname === '/';\n    isLandingPage.set(isLanding);\n    \n    // Don't change language on landing page\n    if (isLanding) {\n      return;\n    }\n    \n    try {\n      localStorage.setItem('language', newLocale);\n    } catch (error) {\n      console.error('Failed to save language preference:', error);\n    }\n  }\n  locale.set(newLocale);\n}\n\n// Get current locale\nfunction getLocale() {\n  // Always return English for landing page\n  if (browser && window.location.pathname === '/') {\n    return 'en';\n  }\n  \n  // Otherwise return saved language or default to English\n  return browser ? localStorage.getItem('language') || 'en' : 'en';\n}\n\n// Export svelte-i18n stores for use in components\nexport { locale, dictionary };"],"file":"_app/immutable/chunks/DIcdBaaF.js"}