{"version":3,"file":"8.BQV_Rdqf.js","sources":["../../../../../../src/routes/audit/hse-questions/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { onMount, onDestroy } from 'svelte';\n  import { fly, fade } from 'svelte/transition';\n  import { spring } from 'svelte/motion';\n  import { ChevronRight, ChevronLeft, Save, Brain, RefreshCw, Circle as XCircle, ArrowLeft, Clock, Shield } from 'lucide-svelte';\n  import { hseQuestions } from '$lib/data/hse-questions';\n  import PhotoUpload from '$lib/components/PhotoUpload.svelte';\n  import PhotoDisplay from '$lib/components/PhotoDisplay.svelte';\n  import AIInsights from '$lib/components/AIInsights.svelte';\n  import QuestionHistory from '$lib/components/QuestionHistory.svelte';\n  import AuditTimer from '$lib/components/AuditTimer.svelte';\n  import { getAIInsights } from '$lib/services/ai';\n  import { supabase } from '$lib/supabase';\n  import { goto } from '$app/navigation';\n  import type { AIInsight } from '$lib/types/ai';\n  import { browser } from '$app/environment';\n  import { _ } from 'svelte-i18n';\n  import { locale } from '$lib/i18n';\n  \n  // Constants for scoring calculation\n  const MAX_POINTS_PER_QUESTION = 5;\n  const QUESTIONS_PER_CATEGORY = 5;\n  const TOTAL_QUESTIONS = 25;\n\n  interface Photo {\n    id: string;\n    file: File;\n    thumbnail: string;\n  }\n\n  interface Answer {\n    rating: number;\n    photos: Photo[];\n    notes: string;\n    aiInsight?: AIInsight | null;\n  }\n\n  interface PreviousAnswer {\n    rating: number;\n    photos: string[];\n    notes: string;\n    created_at: string;\n    aiInsight?: AIInsight;\n    user: {\n      full_name: string;\n      email: string;\n    };\n  }\n\n  let currentQuestionIndex = 0;\n  let progress = spring(0);\n  let answers: Record<number, Answer> = {};\n  let previousAnswers: Record<number, PreviousAnswer[]> = {};\n  let aiLoading = false;\n  let aiError: string | null = null;\n  let saving = false;\n  let saveError: string | null = null;\n  let showExitModal = false;\n  let auditSetupId: string | null = null;\n  let currentSetup: {\n    site_id: string;\n    department_id: string;\n    audit_type: string;\n    start_time?: string;\n  } | null = null;\n  let loadingPrevious = true;\n  let loadError: string | null = null;\n  let timerRef = { stopTimer: () => 0 };\n  let elapsedSeconds = 0;\n  let currentLocale: string;\n  \n  $: currentQuestion = hseQuestions[currentQuestionIndex];\n  $: currentAnswer = answers[currentQuestion.id] || { rating: 0, photos: [], notes: '', aiInsight: null };\n  $: progress.set((currentQuestionIndex / (hseQuestions.length - 1)) * 100);\n\n  // Subscribe to locale changes\n  locale.subscribe(value => {\n    currentLocale = value;\n  });\n\n  onMount(async () => {\n    try {\n      // Get the latest audit setup\n      const { data: setupData, error: setupError } = await supabase\n        .from('audit_setups')\n        .select(`\n          id,\n          site_id,\n          department_id,\n          audit_type,\n          start_time\n        `)\n        .eq('audit_type', 'hse')\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .single();\n\n      if (setupError) throw setupError;\n      if (!setupData) {\n        goto('/audit/setup');\n        return;\n      }\n\n      auditSetupId = setupData.id;\n      currentSetup = {\n        site_id: setupData.site_id,\n        department_id: setupData.department_id,\n        audit_type: setupData.audit_type,\n        start_time: setupData.start_time\n      };\n\n      // Load previous audit data\n      await loadPreviousAudits();\n\n      if (browser) {\n        window.addEventListener('popstate', handlePopState);\n        \n        // Save initial state\n        const state = {\n          questionIndex: currentQuestionIndex,\n          answers\n        };\n        history.replaceState(state, '', window.location.href);\n      }\n    } catch (e) {\n      console.error('Error loading audit setup:', e);\n      loadError = e instanceof Error ? e.message : 'Failed to load data';\n    } finally {\n      loadingPrevious = false;\n    }\n\n    return () => {\n      if (browser) {\n        window.removeEventListener('popstate', handlePopState);\n      }\n    };\n  });\n\n  async function loadPreviousAudits() {\n    if (!currentSetup) return;\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('Not authenticated');\n\n      // Get user's company\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('company_id')\n        .eq('id', user.id)\n        .single();\n\n      if (!profile?.company_id) throw new Error('Company not found');\n\n      // Fetch previous audits with matching site, department, and type\n      const { data: audits, error: fetchError } = await supabase\n        .from('audit_history')\n        .select('*')\n        .eq('site_id', currentSetup.site_id)\n        .eq('department_id', currentSetup.department_id)\n        .eq('audit_type', currentSetup.audit_type)\n        .order('created_at', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      // Process audit data\n      previousAnswers = {};\n      audits?.forEach(audit => {\n        const answers = audit.data.answers || [];\n        answers.forEach(answer => {\n          if (!previousAnswers[answer.questionId]) {\n            previousAnswers[answer.questionId] = [];\n          }\n          previousAnswers[answer.questionId].push({\n            rating: answer.rating,\n            photos: answer.photos || [],\n            notes: answer.notes,\n            aiInsight: answer.aiInsight,\n            created_at: audit.created_at,\n            user: {\n              full_name: audit.full_name || audit.email.split('@')[0],\n              email: audit.email\n            }\n          });\n        });\n      });\n    } catch (e) {\n      console.error('Error loading previous audits:', e);\n      throw e;\n    }\n  }\n\n  function handlePopState(event: PopStateEvent) {\n    if (event.state) {\n      currentQuestionIndex = event.state.questionIndex;\n      answers = event.state.answers;\n    }\n  }\n\n  function updateHistory() {\n    if (browser) {\n      const state = {\n        questionIndex: currentQuestionIndex,\n        answers\n      };\n      history.pushState(state, '', window.location.href);\n    }\n  }\n\n  function handleTimerTick(seconds: number) {\n    elapsedSeconds = seconds;\n  }\n\n  async function requestAIInsights() {\n    if (currentAnswer.rating === 0 || !currentAnswer.notes) {\n      aiError = 'Please provide a rating and notes before requesting AI insights';\n      return;\n    }\n\n    aiLoading = true;\n    aiError = null;\n\n    try {\n      const insight = await getAIInsights(\n        currentQuestion.text,\n        currentAnswer.rating,\n        currentAnswer.notes,\n        currentAnswer.photos.map(p => p.file),\n        'hse' // Pass 'hse' as the audit type to use the HSE-specific endpoint\n      );\n\n      answers[currentQuestion.id] = { ...currentAnswer, aiInsight: insight };\n      updateHistory();\n    } catch (error) {\n      aiError = 'Failed to get AI insights. Please try again.';\n    } finally {\n      aiLoading = false;\n    }\n  }\n\n  function handleRating(value: number) {\n    answers[currentQuestion.id] = { ...currentAnswer, rating: value };\n    if ('vibrate' in navigator) navigator.vibrate(15);\n    updateHistory();\n  }\n\n  function handlePhotos(event: CustomEvent<{ photos: Photo[] }>) {\n    answers[currentQuestion.id] = { ...currentAnswer, photos: event.detail.photos };\n    updateHistory();\n  }\n\n  function handlePhotoError(event: CustomEvent<{ message: string }>) {\n    console.error(event.detail.message);\n  }\n\n  function handleNotes(event: Event) {\n    const notes = (event.target as HTMLTextAreaElement).value;\n    answers[currentQuestion.id] = { ...currentAnswer, notes };\n    updateHistory();\n  }\n\n  function removePhoto(id: string) {\n    const updatedPhotos = currentAnswer.photos.filter(p => p.id !== id);\n    answers[currentQuestion.id] = { ...currentAnswer, photos: updatedPhotos };\n    updateHistory();\n  }\n\n  function navigate(direction: 'prev' | 'next') {\n    if (direction === 'prev' && currentQuestionIndex > 0) {\n      currentQuestionIndex--;\n    } else if (direction === 'next' && currentQuestionIndex < hseQuestions.length - 1) {\n      currentQuestionIndex++;\n    }\n    if ('vibrate' in navigator) navigator.vibrate(15);\n    updateHistory();\n  }\n\n  async function uploadPhotos(photos: Photo[], questionId: number): Promise<string[]> {\n    const uploadPromises = photos.map(async (photo) => {\n      const fileExt = photo.file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `audit-photos/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('public')\n        .upload(filePath, photo.file);\n\n      if (uploadError) throw uploadError;\n\n      const { data: { publicUrl } } = supabase.storage\n        .from('public')\n        .getPublicUrl(filePath);\n\n      return publicUrl;\n    });\n\n    return Promise.all(uploadPromises);\n  }\n\n  async function saveAudit() {\n    saving = true;\n    saveError = null;\n\n    try {\n      // Get user and company info\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('company_id')\n        .eq('id', user.id)\n        .single();\n\n      if (!profile?.company_id) throw new Error('Company not found');\n\n      // Stop the timer and get the final duration\n      const duration = timerRef.stopTimer();\n      \n      // Upload photos and prepare audit data\n      const auditData = await Promise.all(\n        Object.entries(answers).map(async ([questionId, answer]) => {\n          const photoUrls = await uploadPhotos(answer.photos, parseInt(questionId));\n          \n          return {\n            questionId: parseInt(questionId),\n            rating: answer.rating,\n            notes: answer.notes,\n            photos: photoUrls,\n            aiInsight: answer.aiInsight\n          };\n        })\n      );\n\n      // Calculate average score\n      const totalScore = Object.values(answers).reduce((sum, answer) => sum + answer.rating, 0);\n      const avgScore = totalScore / Object.keys(answers).length || 0;\n      \n      // Calculate percentage score (total points / max possible points * 100)\n      const totalQuestions = Object.keys(answers).length;\n      const maxPossiblePoints = totalQuestions * MAX_POINTS_PER_QUESTION;\n      const percentageScore = (totalScore / maxPossiblePoints) * 100;\n      \n      // Count critical issues (ratings of 1 or 2)\n      const criticalIssues = Object.values(answers).filter(answer => answer.rating <= 2).length;\n\n      // Save audit to database with duration, raw score and percentage score\n      const { error: saveError } = await supabase\n        .from('audits')\n        .insert({\n          user_id: user.id,\n          company_id: profile.company_id,\n          setup_id: auditSetupId,\n          data: {\n            version: 1,\n            timestamp: new Date().toISOString(),\n            answers: auditData,\n            score: percentageScore,\n            critical_issues: criticalIssues,\n            duration_seconds: duration\n          }\n        });\n\n      if (saveError) throw saveError;\n\n      // Redirect to dashboard on success\n      goto('/dashboard');\n    } catch (error) {\n      console.error('Failed to save audit:', error);\n      saveError = error instanceof Error ? error.message : 'Failed to save audit';\n      saving = false;\n    }\n  }\n\n  function handleExit() {\n    showExitModal = true;\n  }\n\n  function confirmExit() {\n    showExitModal = false;\n    goto('/dashboard');\n  }\n\n  function cancelExit() {\n    showExitModal = false;\n  }\n</script>\n\n<div class=\"min-h-screen bg-gradient-to-br from-green-50 to-white\">\n  <!-- Progress Bar -->\n  <div class=\"fixed top-0 left-0 w-full h-1 bg-gray-100\">\n    <div \n      class=\"h-full bg-green-500 transition-all duration-300 ease-out\"\n      style=\"width: {$progress}%\"\n    />\n  </div>\n\n  <!-- Exit Button -->\n  <button\n    class=\"fixed top-4 right-4 flex items-center space-x-2 px-4 py-2 bg-red-50 \n           text-red-600 rounded-lg hover:bg-red-100 transition-colors z-50\"\n    on:click={handleExit}\n  >\n    <XCircle class=\"w-5 h-5\" />\n    <span>Exit</span>\n  </button>\n\n  <!-- Category Header -->\n  <div class=\"bg-white shadow-sm\">\n    <div class=\"max-w-4xl mx-auto px-6 py-4 flex justify-between items-center\">\n      <div>\n        <h1 class=\"text-sm font-medium text-green-600\">\n          {currentQuestion.category}\n        </h1>\n        <p class=\"text-gray-500 text-sm mt-1\">\n          Question {currentQuestionIndex + 1} of {hseQuestions.length}\n        </p>\n      </div>\n      \n      <!-- Timer -->\n      <div class=\"flex items-center space-x-2 bg-green-50 px-3 py-1.5 rounded-lg\">\n        <AuditTimer \n          startTime={currentSetup?.start_time ? new Date(currentSetup.start_time) : null}\n          onTick={handleTimerTick}\n          bind:this={timerRef}\n        />\n      </div>\n      \n      <!-- Right Spacer -->\n      <div class=\"flex-1 max-w-[100px]\"><!-- Empty spacer for balance --></div>\n    </div>\n  </div>\n\n  <!-- Main Content Area -->\n  <div class=\"max-w-4xl mx-auto p-6 space-y-8\">\n    <div \n      in:fly={{ y: 20, duration: 300 }}\n      out:fly={{ y: -20, duration: 300 }}\n      class=\"space-y-8\"\n    >\n      <!-- Question -->\n      <div class=\"bg-white rounded-2xl shadow-lg p-6 space-y-6\">\n        <div class=\"flex items-start space-x-4\">\n          <div class=\"bg-green-100 p-2 rounded-full flex-shrink-0 mt-1\">\n            <Shield class=\"w-5 h-5 text-green-600\" />\n          </div>\n          <h2 class=\"text-xl font-light text-gray-900\">\n            {currentLocale === 'de' && currentQuestion.text_de ? currentQuestion.text_de : currentLocale === 'tr' && currentQuestion.text_tr ? currentQuestion.text_tr : currentQuestion.text}\n          </h2>\n        </div>\n\n        <!-- Question History -->\n        {#if !loadingPrevious && previousAnswers[currentQuestion.id]?.length > 0}\n          <QuestionHistory\n            questionId={currentQuestion.id}\n            previousAnswers={previousAnswers[currentQuestion.id]}\n          />\n        {/if}\n        \n        \n        \n        <!-- Rating -->\n        <div class=\"flex justify-between items-center py-4\">\n          {#each Array(5) as _, i}\n            <button\n              class=\"w-14 h-14 rounded-xl transition-all duration-200\n                     hover:bg-green-50 focus:outline-none focus:ring-2\n                     focus:ring-green-500 focus:ring-offset-2 relative\n                     {currentAnswer.rating === i + 1 ? 'bg-green-500 text-white shadow-lg' : 'bg-white shadow-md'}\"\n              on:click={() => handleRating(i + 1)}\n            >\n              <span class=\"text-lg font-medium\">\n                {i + 1}\n              </span>\n              {#if currentAnswer.rating === i + 1}\n                <div class=\"absolute -top-2 -right-2 w-4 h-4 bg-blue-500 rounded-full\" />\n              {/if}\n              \n              \n            </button>\n          {/each}\n          \n          \n        </div>\n\n        <!-- Photo Upload and Display -->\n        <div class=\"space-y-2\">\n          <label class=\"text-sm font-medium text-gray-700\">Evidence Photos</label>\n          <PhotoUpload\n            photos={currentAnswer.photos}\n            on:change={handlePhotos}\n            on:error={handlePhotoError}\n          />\n          <PhotoDisplay\n            photos={currentAnswer.photos}\n            onRemove={removePhoto}\n          />\n        </div>\n\n        <!-- Notes -->\n        <div class=\"space-y-2\">\n          <label class=\"text-sm font-medium text-gray-700\">{$_('walks.notes')}</label>\n          <textarea\n            value={currentAnswer.notes}\n            on:input={handleNotes}\n            class=\"w-full p-4 h-24 rounded-xl bg-gray-50\n                   border-none text-gray-700 placeholder-gray-400\n                   focus:ring-2 focus:ring-green-500 focus:outline-none\n                   resize-none\"\n            placeholder={$_('walks.addNotes')}\n          />\n        </div>\n\n        <!-- AI Review Button -->\n        <div class=\"flex space-x-4\">\n          {#if !currentAnswer.aiInsight}\n            <button\n              class=\"flex items-center space-x-2 px-4 py-2 bg-purple-50 \n                     text-purple-600 rounded-lg hover:bg-purple-100 \n                     transition-colors disabled:opacity-50 \n                     disabled:cursor-not-allowed\"\n              on:click={requestAIInsights}\n              disabled={aiLoading || !currentAnswer.rating || !currentAnswer.notes}\n            >\n              <Brain class=\"w-5 h-5\" />\n              <span>Get AI Review</span>\n            </button>\n          {:else}\n            <button\n              class=\"flex items-center space-x-2 px-4 py-2 bg-purple-50 \n                     text-purple-600 rounded-lg hover:bg-purple-100 \n                     transition-colors disabled:opacity-50 \n                     disabled:cursor-not-allowed\"\n              on:click={requestAIInsights}\n              disabled={aiLoading}\n            >\n              <RefreshCw class=\"w-5 h-5 {aiLoading ? 'animate-spin' : ''}\" />\n              <span>Refresh AI Review</span>\n            </button>\n          {/if}\n          \n        </div>\n      </div>\n\n      <!-- AI Insights -->\n      {#if currentAnswer.rating > 0 && currentAnswer.notes && (aiLoading || currentAnswer.aiInsight || aiError)}\n        <AIInsights\n          insight={currentAnswer.aiInsight}\n          loading={aiLoading}\n          error={aiError}\n        />\n      {/if}\n      \n\n      <!-- Save Error Message -->\n      {#if saveError}\n        <div \n          class=\"bg-red-50 text-red-600 p-4 rounded-lg flex items-start space-x-2\"\n          transition:fly={{ y: 10, duration: 300 }}\n        >\n          <span>{saveError}</span>\n        </div>\n      {/if}\n    </div>\n  </div>\n\n  <!-- Navigation Buttons -->\n  <div class=\"fixed bottom-8 right-8 flex space-x-4\">\n    {#if currentQuestionIndex > 0}\n      <button\n        class=\"w-12 h-12 rounded-xl bg-white text-green-500 shadow-lg\n               flex items-center justify-center transform transition-all\n               duration-200 hover:scale-105 active:scale-95\n               focus:outline-none focus:ring-2 focus:ring-green-500\n               focus:ring-offset-2\"\n        on:click={() => navigate('prev')}\n      >\n        <ChevronLeft class=\"w-6 h-6\" />\n      </button>\n    {/if}\n    \n\n    {#if currentQuestionIndex === hseQuestions.length - 1}\n      <button\n        class=\"px-6 h-12 rounded-xl bg-green-500 text-white shadow-lg\n               flex items-center justify-center transform transition-all\n               duration-200 hover:scale-105 active:scale-95\n               focus:outline-none focus:ring-2 focus:ring-green-500\n               focus:ring-offset-2 space-x-2 disabled:opacity-50\n               disabled:cursor-not-allowed disabled:hover:scale-100\"\n        on:click={saveAudit}\n        disabled={saving}\n      >\n        {#if saving}\n          <div class=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n          <span>Saving...</span>\n        {:else}\n          <Save class=\"w-5 h-5\" />\n          <span>Save Audit</span>\n        {/if}\n        \n      </button>\n    {:else}\n      <button\n        class=\"w-12 h-12 rounded-xl bg-green-500 text-white shadow-lg\n               flex items-center justify-center transform transition-all\n               duration-200 hover:scale-105 active:scale-95\n               focus:outline-none focus:ring-2 focus:ring-green-500\n               focus:ring-offset-2\"\n        on:click={() => navigate('next')}\n      >\n        <ChevronRight class=\"w-6 h-6\" />\n      </button>\n    {/if}\n  </div>\n\n  <!-- Exit Confirmation Modal -->\n  {#if showExitModal}\n    <div \n      class=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-[100]\"\n      transition:fade={{ duration: 200 }}\n      on:click={cancelExit}\n    >\n      <div \n        class=\"bg-white rounded-xl p-6 max-w-md w-full space-y-4\"\n        on:click|stopPropagation\n      >\n        <h3 class=\"text-lg font-medium text-gray-900\">\n          Are you sure you want to exit the audit?\n        </h3>\n        \n        <p class=\"text-red-600 font-medium\">\n          WARNING: Any unsaved progress will be lost and cannot be recovered.\n        </p>\n        \n        <div class=\"flex justify-end space-x-4\">\n          <button\n            class=\"px-4 py-2 text-gray-600 hover:text-gray-900 transition-colors\"\n            on:click={cancelExit}\n          >\n            Cancel\n          </button>\n          \n          <button\n            class=\"px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 \n                   transition-colors\"\n            on:click={confirmExit}\n          >\n            Exit\n          </button>\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>"],"names":["$.mutable_source","locale","$.set","$.get","answers","$.mutate","event","$.update","saveError","$.index","$$anchor","$.template_effect","$.transition","$.event","$.set_text","$.set_value"],"mappings":"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"}