{"version":3,"file":"12.Csg99zgt.js","sources":["../../../../../../src/routes/checkin/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { fade, slide, fly } from 'svelte/transition';\n  import { _ } from 'svelte-i18n';\n  import { Shield, BadgeCheck, DollarSign, Truck, Users, Leaf, Plus, ChevronDown, ChevronUp, Brain, TriangleAlert as AlertTriangle, Calendar, Clock, Save, Loader } from 'lucide-svelte';\n  import { supabase } from '$lib/supabase';\n  import { goto } from '$app/navigation'; \n  import { user } from '$lib/supabase';\n  import Sidebar from '$lib/components/Sidebar.svelte';\n\n  // Store subscription at the top level\n  let localUser = user;\n\n  // Sidebar state\n  let isSidebarOpen = true;\n\n  // SQCDPE+ Categories\n  const categories = [\n    { id: 'safety', label: 'Safety', icon: Shield, color: 'red' },\n    { id: 'quality', label: 'Quality', icon: BadgeCheck, color: 'blue' },\n    { id: 'cost', label: 'Cost', icon: DollarSign, color: 'yellow' },\n    { id: 'delivery', label: 'Delivery', icon: Truck, color: 'green' },\n    { id: 'people', label: 'People', icon: Users, color: 'purple' },\n    { id: 'environment', label: 'Environment', icon: Leaf, color: 'emerald' },\n    { id: 'plus', label: 'Plus (+)', icon: Plus, color: 'gray' }\n  ];\n\n  // Form state\n  let selectedSite = '';\n  let selectedDepartment = '';\n  let shiftType = 'morning';\n  let sites: Array<{ id: string; name: string }> = [];\n  let departments: Array<{ id: string; name: string; site_id: string }> = [];\n  let categoryStatus: Record<string, 'green' | 'yellow' | 'red'> = {};\n  let categoryNotes: Record<string, string> = {};\n  let generalNotes = '';\n  let showActionForm = false;\n  let currentCategory = '';\n\n  // Action item form\n  let actionDescription = '';\n  let actionRootCause = '';\n  let actionCorrectiveAction = '';\n  let actionAssignedTo = '';\n  let actionDueDate = '';\n  let actionPriority = 'medium';\n\n  // Loading states\n  let loading = true;\n  let saving = false;\n  let error: string | null = null;\n  let aiLoading = false;\n  let aiInsight: any = null;\n\n  // Filter departments based on selected site\n  $: filteredDepartments = departments.filter(\n    dept => !selectedSite || dept.site_id === selectedSite\n  );\n\n  onMount(async () => {\n    try {\n      // Check if user is authenticated using local variable\n      if (!$localUser) {\n        goto('/signin');\n        return;\n      }\n      \n      // Get user's company\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('Not authenticated');\n\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('company_id')\n        .eq('id', user.id)\n        .single();\n\n      if (!profile?.company_id) throw new Error('Company not found');\n\n      // Fetch sites and departments\n      const [{ data: sitesData }, { data: deptsData }] = await Promise.all([\n        supabase\n          .from('sites')\n          .select('*')\n          .eq('company_id', profile.company_id),\n        supabase\n          .from('departments')\n          .select('*')\n          .eq('company_id', profile.company_id)\n      ]);\n\n      if (sitesData) sites = sitesData;\n      if (deptsData) departments = deptsData;\n\n      // Initialize category status\n      categories.forEach(cat => {\n        categoryStatus[cat.id] = 'green';\n        categoryNotes[cat.id] = '';\n      });\n\n    } catch (e) {\n      console.error('Error loading data:', e);\n      error = e instanceof Error ? e.message : 'Failed to load data';\n    } finally {\n      loading = false;\n    }\n  });\n\n  async function handleStatusChange(category: string, status: 'green' | 'yellow' | 'red') {\n    categoryStatus[category] = status;\n\n    // Show action form for yellow/red status\n    if (status !== 'green') {\n      currentCategory = category;\n      showActionForm = true;\n    }\n  }\n\n  async function requestAIInsights() {\n    if (aiLoading) return;\n    \n    aiLoading = true;\n    try {\n      const response = await fetch('/checkin/api/insights', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          categories: Object.entries(categoryStatus).map(([id, status]) => ({\n            id,\n            status,\n            notes: categoryNotes[id]\n          })),\n          generalNotes\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to get AI insights');\n      aiInsight = await response.json();\n    } catch (e) {\n      console.error('Error getting AI insights:', e);\n    } finally {\n      aiLoading = false;\n    }\n  }\n\n  async function handleSubmit() {\n    if (!selectedSite || !selectedDepartment) {\n      error = 'Please select site and department';\n      return;\n    }\n\n    saving = true;\n    error = null;\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('Not authenticated');\n\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('company_id')\n        .eq('id', user.id)\n        .single();\n\n      if (!profile?.company_id) throw new Error('Company not found');\n\n      // Create checkin\n      const { data: checkin, error: checkinError } = await supabase\n        .from('daily_checkins')\n        .insert({\n          company_id: profile.company_id,\n          site_id: selectedSite,\n          department_id: selectedDepartment,\n          created_by: user.id,\n          shift_type: shiftType,\n          notes: generalNotes\n        })\n        .select()\n        .single();\n\n      if (checkinError) throw checkinError;\n\n      // Create category statuses\n      const categoryPromises = Object.entries(categoryStatus).map(([category, status]) => \n        supabase\n          .from('checkin_categories')\n          .insert({\n            checkin_id: checkin.id,\n            category,\n            status,\n            notes: categoryNotes[category]\n          })\n      );\n\n      await Promise.all(categoryPromises);\n\n      // Redirect to dashboard\n      goto('/dashboard');\n    } catch (e) {\n      console.error('Error saving checkin:', e);\n      error = e instanceof Error ? e.message : 'Failed to save checkin';\n    } finally {\n      saving = false;\n    }\n  }\n</script>\n\n<div class=\"flex\">\n  <!-- Sidebar component -->\n  <Sidebar bind:isOpen={isSidebarOpen} />\n  \n  <!-- Main content with padding to accommodate sidebar -->\n  <div class=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-12 px-6 flex-grow\"\n       class:pl-64={isSidebarOpen}\n       class:pl-20={!isSidebarOpen}\n       style=\"transition: padding-left 0.3s\">\n    <div class=\"max-w-4xl mx-auto space-y-8\">\n      <!-- Header -->\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <h1 class=\"text-2xl font-light text-gray-900\">{$_('checkin.dailyCheckin')}</h1>\n          <p class=\"text-gray-500\">{$_('checkin.preShiftMeeting')}</p>\n        </div>\n        \n        <div class=\"flex items-center space-x-4\">\n          <div class=\"text-sm text-gray-500\">\n            <Calendar class=\"w-4 h-4 inline-block mr-1\" />\n            {new Date().toLocaleDateString()}\n          </div>\n          <div class=\"text-sm text-gray-500\">\n            <Clock class=\"w-4 h-4 inline-block mr-1\" />\n            {new Date().toLocaleTimeString()}\n          </div>\n        </div>\n      </div>\n\n      {#if loading}\n        <div class=\"flex justify-center py-12\">\n          <div class=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500\"></div>\n        </div>\n      {:else}\n        <div class=\"bg-white rounded-xl shadow-lg p-6 space-y-6\">\n          <!-- Location Selection -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">{$_('checkin.site')}</label>\n              <select\n                bind:value={selectedSite}\n                class=\"w-full px-4 py-2 rounded-lg bg-gray-50 border-gray-200\n                       focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"\">Select a site</option>\n                {#each sites as site}\n                  <option value={site.id}>{site.name}</option>\n                {/each}\n              </select>\n            </div>\n\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">{$_('checkin.department')}</label>\n              <select\n                bind:value={selectedDepartment}\n                disabled={!selectedSite}\n                class=\"w-full px-4 py-2 rounded-lg bg-gray-50 border-gray-200\n                       focus:ring-2 focus:ring-blue-500 focus:border-blue-500\n                       disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <option value=\"\">Select a department</option>\n                {#each filteredDepartments as department}\n                  <option value={department.id}>{department.name}</option>\n                {/each}\n              </select>\n            </div>\n          </div>\n\n          <!-- Shift Selection -->\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 mb-2\">{$_('checkin.shift')}</label>\n            <div class=\"flex space-x-4\">\n              <label class=\"inline-flex items-center\">\n                <input\n                  type=\"radio\"\n                  bind:group={shiftType}\n                  value=\"morning\"\n                  class=\"form-radio text-blue-500\"\n                />\n                <span class=\"ml-2\">{$_('checkin.morning')}</span>\n              </label>\n              <label class=\"inline-flex items-center\">\n                <input\n                  type=\"radio\"\n                  bind:group={shiftType}\n                  value=\"afternoon\"\n                  class=\"form-radio text-blue-500\"\n                />\n                <span class=\"ml-2\">{$_('checkin.afternoon')}</span>\n              </label>\n              <label class=\"inline-flex items-center\">\n                <input\n                  type=\"radio\"\n                  bind:group={shiftType}\n                  value=\"night\"\n                  class=\"form-radio text-blue-500\"\n                />\n                <span class=\"ml-2\">{$_('checkin.night')}</span>\n              </label>\n            </div>\n          </div>\n\n          <!-- Category Status -->\n          <div class=\"space-y-4\">\n            <h2 class=\"text-lg font-medium text-gray-900\">{$_('checkin.categoryStatus')}</h2>\n            \n            {#each categories as category}\n              <div class=\"bg-gray-50 rounded-lg p-4 space-y-4\">\n                <div class=\"flex items-center justify-between\">\n                  <div class=\"flex items-center space-x-3\">\n                    <div class=\"p-2 rounded-lg bg-{category.color}-100\">\n                      <svelte:component \n                        this={category.icon}\n                        class=\"w-5 h-5 text-{category.color}-600\"\n                      />\n                    </div>\n                    <span class=\"font-medium\">{$_(`sqcdpe.${category.id}`)}</span>\n                  </div>\n\n                  <div class=\"flex items-center space-x-2\">\n                    <button\n                      class=\"w-8 h-8 rounded-full bg-green-100 hover:bg-green-200 \n                             transition-colors {categoryStatus[category.id] === 'green' ? 'ring-2 ring-green-500' : ''}\"\n                      on:click={() => handleStatusChange(category.id, 'green')}\n                    >\n                      <span class=\"sr-only\">{$_('sqcdpe.green')}</span>\n                    </button>\n                    <button\n                      class=\"w-8 h-8 rounded-full bg-yellow-100 hover:bg-yellow-200 \n                             transition-colors {categoryStatus[category.id] === 'yellow' ? 'ring-2 ring-yellow-500' : ''}\"\n                      on:click={() => handleStatusChange(category.id, 'yellow')}\n                    >\n                      <span class=\"sr-only\">{$_('sqcdpe.yellow')}</span>\n                    </button>\n                    <button\n                      class=\"w-8 h-8 rounded-full bg-red-100 hover:bg-red-200 \n                             transition-colors {categoryStatus[category.id] === 'red' ? 'ring-2 ring-red-500' : ''}\"\n                      on:click={() => handleStatusChange(category.id, 'red')}\n                    >\n                      <span class=\"sr-only\">{$_('sqcdpe.red')}</span>\n                    </button>\n                  </div>\n                </div>\n\n                <div class=\"space-y-2\">\n                  <textarea\n                    bind:value={categoryNotes[category.id]}\n                    class=\"w-full px-4 py-2 rounded-lg bg-white border-gray-200\n                           focus:ring-2 focus:ring-blue-500 focus:border-blue-500\n                           resize-none\"\n                    rows=\"2\"\n                    placeholder={`${$_('checkin.addGeneralNotes')} ${$_(`sqcdpe.${category.id}`)}...`}\n                  ></textarea>\n                </div>\n              </div>\n            {/each}\n          </div>\n\n          <!-- General Notes -->\n          <div class=\"space-y-2\">\n            <label class=\"block text-sm font-medium text-gray-700\">{$_('checkin.generalNotes')}</label>\n            <textarea\n              bind:value={generalNotes}\n              class=\"w-full px-4 py-2 rounded-lg bg-gray-50 border-gray-200\n                     focus:ring-2 focus:ring-blue-500 focus:border-blue-500\n                     resize-none\"\n              rows=\"4\"\n              placeholder={$_('checkin.addGeneralNotes')}\n            ></textarea>\n          </div>\n\n          <!-- AI Insights -->\n          <div class=\"space-y-4\">\n            <button\n              class=\"flex items-center space-x-2 px-4 py-2 bg-purple-100 \n                     text-purple-600 rounded-lg hover:bg-purple-200 \n                     transition-colors disabled:opacity-50\"\n              on:click={requestAIInsights}\n              disabled={aiLoading}\n            >\n              <Brain class=\"w-5 h-5\" />\n              <span>{aiLoading ? $_('checkin.analyzing') : $_('checkin.getAIInsights')}</span>\n            </button>\n\n            {#if aiInsight}\n              <div class=\"bg-purple-50 rounded-lg p-4 space-y-4\">\n                <h3 class=\"font-medium text-purple-900\">{$_('checkin.aiAnalysis')}</h3>\n                <div class=\"prose prose-sm text-purple-800\">\n                  <p>{aiInsight.summary}</p>\n                  {#if aiInsight.recommendations?.length}\n                    <h4 class=\"text-sm font-medium mt-4\">Recommendations:</h4>\n                    <ul class=\"list-disc pl-4 space-y-2\">\n                      {#each aiInsight.recommendations as rec}\n                        <li>{rec}</li>\n                      {/each}\n                    </ul>\n                  {/if}\n                </div>\n              </div>\n            {/if}\n          </div>\n\n          <!-- Error Message -->\n          {#if error}\n            <div \n              class=\"bg-red-50 text-red-600 p-4 rounded-lg flex items-start space-x-2\"\n              transition:fly={{ y: 10, duration: 300 }}\n            >\n              <AlertTriangle class=\"w-5 h-5 flex-shrink-0 mt-0.5\" />\n              <span>{error}</span>\n            </div>\n          {/if}\n\n          <!-- Submit Button -->\n          <div class=\"flex justify-end pt-4\">\n            <button\n              class=\"flex items-center space-x-2 px-6 py-2 bg-blue-500 text-white \n                     rounded-xl hover:bg-blue-600 focus:outline-none focus:ring-2 \n                     focus:ring-blue-500 focus:ring-offset-2 transition-colors\n                     disabled:opacity-50 disabled:cursor-not-allowed\"\n              on:click={handleSubmit}\n              disabled={saving}\n            >\n              {#if saving}\n                <div class=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                <span>{$_('common.saving')}</span>\n              {:else}\n                <Save class=\"w-5 h-5\" />\n                <span>{$_('checkin.submitCheckin')}</span>\n              {/if}\n            </button>\n          </div>\n        </div>\n      {/if}\n    </div>\n  </div>\n</div>"],"names":["$.mutable_source","BadgeCheck","DollarSign","user","$.set","$.get","$.mutate","$.each","$.set_text","$.component","$$anchor","$.set_class","$.event","$.index","$.transition","$.template_effect","$.derived_safe_equal","$.bind_select_value","$.bind_group","$.bind_value"],"mappings":"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"}